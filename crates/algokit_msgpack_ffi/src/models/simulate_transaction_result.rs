/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// SimulateTransactionResult : Simulation result for an individual transaction



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct SimulateTransactionResult {
    #[serde(rename = "txn-result")]
    
    
    
    pub txn_result: models::PendingTransactionResponse,
    /// Budget used during execution of an app call transaction. This value includes budged used by inner app calls spawned by this transaction.
    #[serde(rename = "app-budget-consumed", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub app_budget_consumed: Option<i32>,
    /// Budget used during execution of a logic sig transaction.
    #[serde(rename = "logic-sig-budget-consumed", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub logic_sig_budget_consumed: Option<i32>,
    #[serde(rename = "exec-trace", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub exec_trace: Option<models::SimulationTransactionExecTrace>,
    #[serde(rename = "unnamed-resources-accessed", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub unnamed_resources_accessed: Option<models::SimulateUnnamedResourcesAccessed>,
    /// The account that needed to sign this transaction when no signature was provided and the provided signer was incorrect.
    #[serde(rename = "fixed-signer", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub fixed_signer: Option<String>,
}

impl SimulateTransactionResult {
    /// Simulation result for an individual transaction
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(
        txn_result: models::PendingTransactionResponse, app_budget_consumed: Option<i32>, logic_sig_budget_consumed: Option<i32>, exec_trace: Option<models::SimulationTransactionExecTrace>, unnamed_resources_accessed: Option<models::SimulateUnnamedResourcesAccessed>, fixed_signer: Option<String>
    ) -> SimulateTransactionResult {
        SimulateTransactionResult {
            txn_result: txn_result,
            app_budget_consumed: app_budget_consumed,
            logic_sig_budget_consumed: logic_sig_budget_consumed,
            exec_trace: exec_trace,
            unnamed_resources_accessed: unnamed_resources_accessed,
            fixed_signer: fixed_signer,
        }
    }
}



impl crate::JsonSerializable for SimulateTransactionResult {}

impl crate::MsgpackDecodable for SimulateTransactionResult {}

crate::auto_impl_json_ffi!(SimulateTransactionResult, simulate_transaction_result);

