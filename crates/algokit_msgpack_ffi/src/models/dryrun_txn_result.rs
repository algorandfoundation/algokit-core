/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DryrunTxnResult : DryrunTxnResult contains any LogicSig or ApplicationCall program debug information and state updates from a dryrun.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct DryrunTxnResult {
    /// Disassembled program line by line.
    #[serde(rename = "disassembly")]
    
    
    
    pub disassembly: Vec<String>,
    /// Disassembled lsig program line by line.
    #[serde(rename = "logic-sig-disassembly", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub logic_sig_disassembly: Option<Vec<String>>,
    #[serde(rename = "logic-sig-trace", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub logic_sig_trace: Option<Vec<models::DryrunState>>,
    #[serde(rename = "logic-sig-messages", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub logic_sig_messages: Option<Vec<String>>,
    #[serde(rename = "app-call-trace", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub app_call_trace: Option<Vec<models::DryrunState>>,
    #[serde(rename = "app-call-messages", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub app_call_messages: Option<Vec<String>>,
    /// Application state delta.
    #[serde(rename = "global-delta", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub global_delta: Option<Vec<models::EvalDeltaKeyValue>>,
    #[serde(rename = "local-deltas", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub local_deltas: Option<Vec<models::AccountStateDelta>>,
    #[serde(rename = "logs", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub logs: Option<Vec<String>>,
    /// Budget added during execution of app call transaction.
    #[serde(rename = "budget-added", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub budget_added: Option<i32>,
    /// Budget consumed during execution of app call transaction.
    #[serde(rename = "budget-consumed", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub budget_consumed: Option<i32>,
}

impl DryrunTxnResult {
    /// DryrunTxnResult contains any LogicSig or ApplicationCall program debug information and state updates from a dryrun.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    #[cfg_attr(feature = "ffi_wasm", wasm_bindgen(constructor))]
    pub fn new(
        disassembly: Vec<String>, logic_sig_disassembly: Option<Vec<String>>, logic_sig_trace: Option<Vec<models::DryrunState>>, logic_sig_messages: Option<Vec<String>>, app_call_trace: Option<Vec<models::DryrunState>>, app_call_messages: Option<Vec<String>>, global_delta: Option<Vec<models::EvalDeltaKeyValue>>, local_deltas: Option<Vec<models::AccountStateDelta>>, logs: Option<Vec<String>>, budget_added: Option<i32>, budget_consumed: Option<i32>
    ) -> DryrunTxnResult {
        DryrunTxnResult {
            disassembly: disassembly,
            logic_sig_disassembly: logic_sig_disassembly,
            logic_sig_trace: logic_sig_trace,
            logic_sig_messages: logic_sig_messages,
            app_call_trace: app_call_trace,
            app_call_messages: app_call_messages,
            global_delta: global_delta,
            local_deltas: local_deltas,
            logs: logs,
            budget_added: budget_added,
            budget_consumed: budget_consumed,
        }
    }
}

impl crate::JsonSerializable for DryrunTxnResult {}


