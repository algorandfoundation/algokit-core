/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// DryrunRequest : Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information.



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct DryrunRequest {
    #[serde(rename = "txns")]
    
    
    
    pub txns: Vec<String>,
    #[serde(rename = "accounts")]
    
    
    
    pub accounts: Vec<models::Account>,
    #[serde(rename = "apps")]
    
    
    
    pub apps: Vec<models::Application>,
    /// ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.
    #[serde(rename = "protocol-version")]
    
    
    
    pub protocol_version: String,
    /// Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.
    #[serde(rename = "round")]
    
    
    
    pub round: i32,
    /// LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.
    #[serde(rename = "latest-timestamp")]
    
    
    
    pub latest_timestamp: i64,
    #[serde(rename = "sources")]
    
    
    
    pub sources: Vec<models::DryrunSource>,
}

impl DryrunRequest {
    /// Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(
        txns: Vec<String>,accounts: Vec<models::Account>,apps: Vec<models::Application>,protocol_version: String,round: i32,latest_timestamp: i64,sources: Vec<models::DryrunSource>,
    ) -> DryrunRequest {
        DryrunRequest {
            txns: txns,
            accounts: accounts,
            apps: apps,
            protocol_version: protocol_version,
            round: round,
            latest_timestamp: latest_timestamp,
            sources: sources,
        }
    }
}



impl crate::JsonSerializable for DryrunRequest {}

impl crate::MsgpackEncodable for DryrunRequest {}

crate::auto_impl_json_ffi!(DryrunRequest, dryrun_request);

