/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct GetTransactionProof200Response {
    /// Proof of transaction membership.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "proof")]
    
    
    
    pub proof: Vec<u8>,
    /// Hash of SignedTxnInBlock for verifying proof.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "stibhash")]
    
    
    
    pub stibhash: Vec<u8>,
    /// Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
    #[serde(rename = "treedepth")]
    
    
    
    pub treedepth: i32,
    /// Index of the transaction in the block's payset.
    #[serde(rename = "idx")]
    
    
    
    pub idx: i32,
    /// The type of hash function used to create the proof, must be one of:  * sha512_256  * sha256
    #[serde(rename = "hashtype")]
    
    
    
    pub hashtype: Hashtype,
}

impl GetTransactionProof200Response {
    pub fn new(proof: Vec<u8>, stibhash: Vec<u8>, treedepth: i32, idx: i32, hashtype: Hashtype) -> GetTransactionProof200Response {
        GetTransactionProof200Response {
            proof,
            stibhash,
            treedepth,
            idx,
            hashtype,
        }
    }
}
/// The type of hash function used to create the proof, must be one of:  * sha512_256  * sha256
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Enum))]
pub enum Hashtype {
    #[serde(rename = "sha512_256")]
    Sha512256,
    #[serde(rename = "sha256")]
    Sha256,
}

impl Default for Hashtype {
    fn default() -> Hashtype {
        Self::Sha512256
    }
}

impl crate::JsonSerializable for GetTransactionProof200Response {}


