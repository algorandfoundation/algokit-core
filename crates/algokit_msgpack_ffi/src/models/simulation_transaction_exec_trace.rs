/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

/// SimulationTransactionExecTrace : The execution trace of calling an app or a logic sig, containing the inner app call trace in a recursive way.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct SimulationTransactionExecTrace {
    /// Program trace that contains a trace of opcode effects in an approval program.
    #[serde(rename = "approval-program-trace", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub approval_program_trace: Option<Vec<models::SimulationOpcodeTraceUnit>>,
    /// SHA512_256 hash digest of the approval program executed in transaction.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "approval-program-hash", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub approval_program_hash: Option<Vec<u8>>,
    /// Program trace that contains a trace of opcode effects in a clear state program.
    #[serde(rename = "clear-state-program-trace", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub clear_state_program_trace: Option<Vec<models::SimulationOpcodeTraceUnit>>,
    /// SHA512_256 hash digest of the clear state program executed in transaction.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "clear-state-program-hash", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub clear_state_program_hash: Option<Vec<u8>>,
    /// If true, indicates that the clear state program failed and any persistent state changes it produced should be reverted once the program exits.
    #[serde(rename = "clear-state-rollback", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub clear_state_rollback: Option<bool>,
    /// The error message explaining why the clear state program failed. This field will only be populated if clear-state-rollback is true and the failure was due to an execution error.
    #[serde(rename = "clear-state-rollback-error", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub clear_state_rollback_error: Option<String>,
    /// Program trace that contains a trace of opcode effects in a logic sig.
    #[serde(rename = "logic-sig-trace", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub logic_sig_trace: Option<Vec<models::SimulationOpcodeTraceUnit>>,
    /// SHA512_256 hash digest of the logic sig executed in transaction.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "logic-sig-hash", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub logic_sig_hash: Option<Vec<u8>>,
    /// An array of SimulationTransactionExecTrace representing the execution trace of any inner transactions executed.
    #[serde(rename = "inner-trace", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub inner_trace: Option<Vec<models::SimulationTransactionExecTrace>>,
}

impl SimulationTransactionExecTrace {
    /// The execution trace of calling an app or a logic sig, containing the inner app call trace in a recursive way.
    pub fn new() -> SimulationTransactionExecTrace {
        SimulationTransactionExecTrace {
            approval_program_trace: None,
            approval_program_hash: None,
            clear_state_program_trace: None,
            clear_state_program_hash: None,
            clear_state_rollback: None,
            clear_state_rollback_error: None,
            logic_sig_trace: None,
            logic_sig_hash: None,
            inner_trace: None,
        }
    }
}

impl crate::JsonSerializable for SimulationTransactionExecTrace {}

impl crate::MsgpackDecodable for SimulationTransactionExecTrace {}

