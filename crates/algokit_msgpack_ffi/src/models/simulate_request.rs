/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// SimulateRequest : Request type for simulation endpoint.



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct SimulateRequest {
    /// The transaction groups to simulate.
    #[serde(rename = "txn-groups")]
    
    
    
    pub txn_groups: Vec<models::SimulateRequestTransactionGroup>,
    /// If provided, specifies the round preceding the simulation. State changes through this round will be used to run this simulation. Usually only the 4 most recent rounds will be available (controlled by the node config value MaxAcctLookback). If not specified, defaults to the latest available round.
    #[serde(rename = "round", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub round: Option<i32>,
    /// Allows transactions without signatures to be simulated as if they had correct signatures.
    #[serde(rename = "allow-empty-signatures", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub allow_empty_signatures: Option<bool>,
    /// Lifts limits on log opcode usage during simulation.
    #[serde(rename = "allow-more-logging", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub allow_more_logging: Option<bool>,
    /// Allows access to unnamed resources during simulation.
    #[serde(rename = "allow-unnamed-resources", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub allow_unnamed_resources: Option<bool>,
    /// Applies extra opcode budget during simulation for each transaction group.
    #[serde(rename = "extra-opcode-budget", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub extra_opcode_budget: Option<i32>,
    #[serde(rename = "exec-trace-config", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub exec_trace_config: Option<models::SimulateTraceConfig>,
    /// If true, signers for transactions that are missing signatures will be fixed during evaluation.
    #[serde(rename = "fix-signers", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub fix_signers: Option<bool>,
}

impl SimulateRequest {
    /// Request type for simulation endpoint.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(
        txn_groups: Vec<models::SimulateRequestTransactionGroup>, round: Option<i32>, allow_empty_signatures: Option<bool>, allow_more_logging: Option<bool>, allow_unnamed_resources: Option<bool>, extra_opcode_budget: Option<i32>, exec_trace_config: Option<models::SimulateTraceConfig>, fix_signers: Option<bool>
    ) -> SimulateRequest {
        SimulateRequest {
            txn_groups: txn_groups,
            round: round,
            allow_empty_signatures: allow_empty_signatures,
            allow_more_logging: allow_more_logging,
            allow_unnamed_resources: allow_unnamed_resources,
            extra_opcode_budget: extra_opcode_budget,
            exec_trace_config: exec_trace_config,
            fix_signers: fix_signers,
        }
    }
}



impl crate::JsonSerializable for SimulateRequest {}

impl crate::MsgpackEncodable for SimulateRequest {}

crate::auto_impl_json_ffi!(SimulateRequest, simulate_request);

