/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct TealDryrun200Response {
    #[serde(rename = "txns")]
    
    
    
    pub txns: Vec<models::DryrunTxnResult>,
    #[serde(rename = "error")]
    
    
    
    pub error: String,
    /// Protocol version is the protocol version Dryrun was operated under.
    #[serde(rename = "protocol-version")]
    
    
    
    pub protocol_version: String,
}

impl TealDryrun200Response {
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(
        txns: Vec<models::DryrunTxnResult>,error: String,protocol_version: String,
    ) -> TealDryrun200Response {
        TealDryrun200Response {
            txns: txns,
            error: error,
            protocol_version: protocol_version,
        }
    }
}



impl crate::JsonSerializable for TealDryrun200Response {}


crate::auto_impl_json_ffi!(TealDryrun200Response, teal_dryrun200_response);

