/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;


#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// AlgorandBox : Box name and its content.



#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_wasm", serde(rename_all = "camelCase"))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
#[cfg_attr(not(feature = "ffi_wasm"), serde(rename_all = "kebab-case"))]
pub struct AlgorandBox {
    /// The round for which this information is relevant
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub round: Option<i32>,
    /// The box name, base64 encoded
    
    #[serde_as(as = "serde_with::base64::Base64")]
    pub name: Vec<u8>,
    /// The box value, base64 encoded.
    
    #[serde_as(as = "serde_with::base64::Base64")]
    pub value: Vec<u8>,
}

impl AlgorandBox {
    /// Box name and its content.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(name: Vec<u8>, value: Vec<u8>, round: Option<i32>, ) -> AlgorandBox {
        AlgorandBox {
            round,
            name,
            value,
        }
    }
}



impl crate::JsonSerializable for AlgorandBox {}


/*
  FFI method naming conventions:
    - Python/UniFFI: snake_case (e.g., teal_key_value_to_json, teal_key_value_from_json)
    - WASM/TypeScript: camelCase (e.g., tealKeyValueToJson, tealKeyValueFromJson)
    - This is enforced by passing the snake_case base name to impl_all_json_ffi!, and the macro uses paste to generate camelCase for WASM/TS.
    - For msgpack FFI, invoke impl_msgpack_ffi! manually for the subset of models that require it, using the same naming logic.
*/

/*
  FFI method naming conventions:
    - Python/UniFFI: snake_case (e.g., teal_key_value_to_json, teal_key_value_from_json)
    - WASM/TypeScript: camelCase (e.g., tealKeyValueToJsValue, tealKeyValueFromJsValue)
    - This is enforced by passing the snake_case base name to impl_all_json_ffi! for Python, and camelCase for WASM/TS.
    - For msgpack FFI, invoke impl_msgpack_ffi! manually for the subset of models that require it, using the same naming logic.
*/

// Auto-register this model for FFI generation - JSON only
crate::impl_all_json_ffi!(AlgorandBox, algorand_box, algorandBox);

