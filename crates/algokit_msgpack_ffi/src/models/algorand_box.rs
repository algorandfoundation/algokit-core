/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

/// AlgorandBox : Box name and its content.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct AlgorandBox {
    /// The round for which this information is relevant
    #[serde(rename = "round", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub round: Option<i32>,
    /// The box name, base64 encoded
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "name")]
    
    
    
    pub name: Vec<u8>,
    /// The box value, base64 encoded.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "value")]
    
    
    
    pub value: Vec<u8>,
}

impl AlgorandBox {
    /// Box name and its content.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    #[cfg_attr(feature = "ffi_wasm", wasm_bindgen(constructor))]
    pub fn new(
        name: Vec<u8>,value: Vec<u8>, round: Option<i32>,
    ) -> AlgorandBox {
        AlgorandBox {
            round: round,
            name: name,
            value: value,
        }
    }
}

impl crate::JsonSerializable for AlgorandBox {}


