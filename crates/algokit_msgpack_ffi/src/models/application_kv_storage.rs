/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApplicationKvStorage : An application's global/local/box state.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ApplicationKvStorage {
    /// Key-Value pairs representing application states.
    #[serde(rename = "kvs")]
    
    
    
    pub kvs: Vec<models::AvmKeyValue>,
    /// The address of the account associated with the local state.
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub account: Option<String>,
}

impl ApplicationKvStorage {
    /// An application's global/local/box state.
    pub fn new(kvs: Vec<models::AvmKeyValue>) -> ApplicationKvStorage {
        ApplicationKvStorage {
            kvs,
            account: None,
        }
    }
}

impl crate::JsonSerializable for ApplicationKvStorage {}

impl crate::MsgpackDecodable for ApplicationKvStorage {}

