/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LedgerStateDeltaForTransactionGroup : Contains a ledger delta for a single transaction group
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct LedgerStateDeltaForTransactionGroup {
    /// Ledger StateDelta object
    #[serde(rename = "Delta")]
    
    
    
    pub delta: String,
    #[serde(rename = "Ids")]
    
    
    
    pub ids: Vec<String>,
}

impl LedgerStateDeltaForTransactionGroup {
    /// Contains a ledger delta for a single transaction group
    pub fn new(delta: String, ids: Vec<String>) -> LedgerStateDeltaForTransactionGroup {
        LedgerStateDeltaForTransactionGroup {
            delta,
            ids,
        }
    }
}

impl crate::JsonSerializable for LedgerStateDeltaForTransactionGroup {}

impl crate::MsgpackDecodable for LedgerStateDeltaForTransactionGroup {}

