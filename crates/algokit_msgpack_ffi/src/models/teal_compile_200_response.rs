/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct TealCompile200Response {
    /// base32 SHA512_256 of program bytes (Address style)
    #[serde(rename = "hash")]
    
    
    
    pub hash: String,
    /// base64 encoded program bytes
    #[serde(rename = "result")]
    
    
    
    pub result: String,
    /// JSON of the source map
    #[serde(rename = "sourcemap", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub sourcemap: Option<String>,
}

impl TealCompile200Response {
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(
        hash: String,result: String, sourcemap: Option<String>
    ) -> TealCompile200Response {
        TealCompile200Response {
            hash: hash,
            result: result,
            sourcemap: sourcemap,
        }
    }
}



impl crate::JsonSerializable for TealCompile200Response {}


crate::auto_impl_json_ffi!(TealCompile200Response, teal_compile200_response);

