/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// StateProof : Represents a state proof and its corresponding message



#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct StateProof {
    #[serde(rename = "Message")]
    
    
    
    pub message: models::StateProofMessage,
    /// The encoded StateProof for the message.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "StateProof")]
    
    
    
    pub state_proof: Vec<u8>,
}

impl StateProof {
    /// Represents a state proof and its corresponding message
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(
        message: models::StateProofMessage,state_proof: Vec<u8>,
    ) -> StateProof {
        StateProof {
            message: message,
            state_proof: state_proof,
        }
    }
}



impl crate::JsonSerializable for StateProof {}


crate::auto_impl_json_ffi!(StateProof, state_proof);

