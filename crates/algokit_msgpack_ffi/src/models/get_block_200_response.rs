/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct GetBlock200Response {
    /// Block header data.
    #[serde(rename = "block")]
    
    
    
    pub block: String,
    /// Optional certificate object. This is only included when the format is set to message pack.
    #[serde(rename = "cert", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub cert: Option<String>,
}

impl GetBlock200Response {
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    #[cfg_attr(feature = "ffi_wasm", wasm_bindgen(constructor))]
    pub fn new(
        block: String, cert: Option<String>
    ) -> GetBlock200Response {
        GetBlock200Response {
            block: block,
            cert: cert,
        }
    }
}

impl crate::JsonSerializable for GetBlock200Response {}

impl crate::MsgpackDecodable for GetBlock200Response {}

