/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApplicationLocalState : Stores local state associated with an application.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ApplicationLocalState {
    /// The application which this local state is for.
    #[serde(rename = "id")]
    
    
    
    pub id: i32,
    #[serde(rename = "schema")]
    
    
    
    pub schema: models::ApplicationStateSchema,
    /// Represents a key-value store for use in an application.
    #[serde(rename = "key-value", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub key_value: Option<Vec<models::TealKeyValue>>,
}

impl ApplicationLocalState {
    /// Stores local state associated with an application.
    pub fn new(id: i32, schema: models::ApplicationStateSchema) -> ApplicationLocalState {
        ApplicationLocalState {
            id,
            schema: schema,
            key_value: None,
        }
    }
}

impl crate::JsonSerializable for ApplicationLocalState {}

impl crate::MsgpackEncodable for ApplicationLocalState {}
impl crate::MsgpackDecodable for ApplicationLocalState {}

