/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// AssetHolding : Describes an asset held by an account.  Definition: data/basics/userBalance.go : AssetHolding



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct AssetHolding {
    /// \\[a\\] number of units held.
    #[serde(rename = "amount")]
    
    
    
    pub amount: i32,
    /// Asset ID of the holding.
    #[serde(rename = "asset-id")]
    
    
    
    pub asset_id: i32,
    /// \\[f\\] whether or not the holding is frozen.
    #[serde(rename = "is-frozen")]
    
    
    
    pub is_frozen: bool,
}

impl AssetHolding {
    /// Describes an asset held by an account.  Definition: data/basics/userBalance.go : AssetHolding
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(
        amount: i32,asset_id: i32,is_frozen: bool,
    ) -> AssetHolding {
        AssetHolding {
            amount: amount,
            asset_id: asset_id,
            is_frozen: is_frozen,
        }
    }
}



impl crate::JsonSerializable for AssetHolding {}

impl crate::MsgpackEncodable for AssetHolding {}
impl crate::MsgpackDecodable for AssetHolding {}

crate::auto_impl_json_ffi!(AssetHolding, asset_holding);

