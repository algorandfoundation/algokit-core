/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ParticipationKey : Represents a participation key used by the node.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ParticipationKey {
    /// The key's ParticipationID.
    #[serde(rename = "id")]
    
    
    
    pub id: String,
    /// Address the key was generated for.
    #[serde(rename = "address")]
    
    
    
    pub address: String,
    /// When registered, this is the first round it may be used.
    #[serde(rename = "effective-first-valid", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub effective_first_valid: Option<i32>,
    /// When registered, this is the last round it may be used.
    #[serde(rename = "effective-last-valid", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub effective_last_valid: Option<i32>,
    /// Round when this key was last used to vote.
    #[serde(rename = "last-vote", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub last_vote: Option<i32>,
    /// Round when this key was last used to propose a block.
    #[serde(rename = "last-block-proposal", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub last_block_proposal: Option<i32>,
    /// Round when this key was last used to generate a state proof.
    #[serde(rename = "last-state-proof", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub last_state_proof: Option<i32>,
    #[serde(rename = "key")]
    
    
    
    pub key: models::AccountParticipation,
}

impl ParticipationKey {
    /// Represents a participation key used by the node.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    #[cfg_attr(feature = "ffi_wasm", wasm_bindgen(constructor))]
    pub fn new(
        id: String,address: String,key: models::AccountParticipation, effective_first_valid: Option<i32>, effective_last_valid: Option<i32>, last_vote: Option<i32>, last_block_proposal: Option<i32>, last_state_proof: Option<i32>,
    ) -> ParticipationKey {
        ParticipationKey {
            id: id,
            address: address,
            effective_first_valid: effective_first_valid,
            effective_last_valid: effective_last_valid,
            last_vote: last_vote,
            last_block_proposal: last_block_proposal,
            last_state_proof: last_state_proof,
            key: key,
        }
    }
}

impl crate::JsonSerializable for ParticipationKey {}


