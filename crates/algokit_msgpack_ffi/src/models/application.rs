/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// Application : Application index and its parameters



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct Application {
    /// \\[appidx\\] application index.
    #[serde(rename = "id")]
    
    
    
    pub id: i32,
    #[serde(rename = "params")]
    
    
    
    pub params: models::ApplicationParams,
}

impl Application {
    /// Application index and its parameters
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(
        id: i32,params: models::ApplicationParams,
    ) -> Application {
        Application {
            id: id,
            params: params,
        }
    }
}



impl crate::JsonSerializable for Application {}

impl crate::MsgpackEncodable for Application {}
impl crate::MsgpackDecodable for Application {}

crate::auto_impl_json_ffi!(Application, application);

