/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AssetHoldingReference : References an asset held by an account.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct AssetHoldingReference {
    /// Address of the account holding the asset.
    #[serde(rename = "account")]
    
    
    
    pub account: String,
    /// Asset ID of the holding.
    #[serde(rename = "asset")]
    
    
    
    pub asset: i32,
}

impl AssetHoldingReference {
    /// References an asset held by an account.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    #[cfg_attr(feature = "ffi_wasm", wasm_bindgen(constructor))]
    pub fn new(
        account: String,asset: i32,
    ) -> AssetHoldingReference {
        AssetHoldingReference {
            account: account,
            asset: asset,
        }
    }
}

impl crate::JsonSerializable for AssetHoldingReference {}

impl crate::MsgpackDecodable for AssetHoldingReference {}

