/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};


#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// GetStatus200Response : NodeStatus contains the information about a node status



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_wasm", serde(rename_all = "camelCase"))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
#[cfg_attr(not(feature = "ffi_wasm"), serde(rename_all = "kebab-case"))]
pub struct GetStatus200Response {
    /// CatchupTime in nanoseconds
    
    pub catchup_time: i32,
    /// LastRound indicates the last round seen
    
    pub last_round: i32,
    /// LastVersion indicates the last consensus version supported
    
    pub last_version: String,
    /// NextVersion of consensus protocol to use
    
    pub next_version: String,
    /// NextVersionRound is the round at which the next consensus version will apply
    
    pub next_version_round: i32,
    /// NextVersionSupported indicates whether the next consensus version is supported by this node
    
    pub next_version_supported: bool,
    /// StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
    
    pub stopped_at_unsupported_round: bool,
    /// TimeSinceLastRound in nanoseconds
    
    pub time_since_last_round: i32,
    /// The last catchpoint seen by the node
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub last_catchpoint: Option<String>,
    /// The current catchpoint that is being caught up to
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catchpoint: Option<String>,
    /// The total number of accounts included in the current catchpoint
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catchpoint_total_accounts: Option<i32>,
    /// The number of accounts from the current catchpoint that have been processed so far as part of the catchup
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catchpoint_processed_accounts: Option<i32>,
    /// The number of accounts from the current catchpoint that have been verified so far as part of the catchup
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catchpoint_verified_accounts: Option<i32>,
    /// The total number of key-values (KVs) included in the current catchpoint
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catchpoint_total_kvs: Option<i32>,
    /// The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catchpoint_processed_kvs: Option<i32>,
    /// The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catchpoint_verified_kvs: Option<i32>,
    /// The total number of blocks that are required to complete the current catchpoint catchup
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catchpoint_total_blocks: Option<i32>,
    /// The number of blocks that have already been obtained by the node as part of the catchup
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catchpoint_acquired_blocks: Option<i32>,
    /// Upgrade delay
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upgrade_delay: Option<i32>,
    /// This node's upgrade vote
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upgrade_node_vote: Option<bool>,
    /// Yes votes required for consensus upgrade
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upgrade_votes_required: Option<i32>,
    /// Total votes cast for consensus upgrade
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upgrade_votes: Option<i32>,
    /// Yes votes cast for consensus upgrade
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upgrade_yes_votes: Option<i32>,
    /// No votes cast for consensus upgrade
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upgrade_no_votes: Option<i32>,
    /// Next protocol round
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upgrade_next_protocol_vote_before: Option<i32>,
    /// Total voting rounds for current upgrade
    
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upgrade_vote_rounds: Option<i32>,
}

impl GetStatus200Response {
    /// NodeStatus contains the information about a node status
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(catchup_time: i32, last_round: i32, last_version: String, next_version: String, next_version_round: i32, next_version_supported: bool, stopped_at_unsupported_round: bool, time_since_last_round: i32, last_catchpoint: Option<String>, catchpoint: Option<String>, catchpoint_total_accounts: Option<i32>, catchpoint_processed_accounts: Option<i32>, catchpoint_verified_accounts: Option<i32>, catchpoint_total_kvs: Option<i32>, catchpoint_processed_kvs: Option<i32>, catchpoint_verified_kvs: Option<i32>, catchpoint_total_blocks: Option<i32>, catchpoint_acquired_blocks: Option<i32>, upgrade_delay: Option<i32>, upgrade_node_vote: Option<bool>, upgrade_votes_required: Option<i32>, upgrade_votes: Option<i32>, upgrade_yes_votes: Option<i32>, upgrade_no_votes: Option<i32>, upgrade_next_protocol_vote_before: Option<i32>, upgrade_vote_rounds: Option<i32>) -> GetStatus200Response {
        GetStatus200Response {
            catchup_time,
            last_round,
            last_version,
            next_version,
            next_version_round,
            next_version_supported,
            stopped_at_unsupported_round,
            time_since_last_round,
            last_catchpoint,
            catchpoint,
            catchpoint_total_accounts,
            catchpoint_processed_accounts,
            catchpoint_verified_accounts,
            catchpoint_total_kvs,
            catchpoint_processed_kvs,
            catchpoint_verified_kvs,
            catchpoint_total_blocks,
            catchpoint_acquired_blocks,
            upgrade_delay,
            upgrade_node_vote,
            upgrade_votes_required,
            upgrade_votes,
            upgrade_yes_votes,
            upgrade_no_votes,
            upgrade_next_protocol_vote_before,
            upgrade_vote_rounds,
        }
    }
}



impl crate::JsonSerializable for GetStatus200Response {}


/*
  FFI method naming conventions:
    - Python/UniFFI: snake_case (e.g., teal_key_value_to_json, teal_key_value_from_json)
    - WASM/TypeScript: camelCase (e.g., tealKeyValueToJson, tealKeyValueFromJson)
    - This is enforced by passing the snake_case base name to impl_all_json_ffi!, and the macro uses paste to generate camelCase for WASM/TS.
    - For msgpack FFI, invoke impl_msgpack_ffi! manually for the subset of models that require it, using the same naming logic.
*/

/*
  FFI method naming conventions:
    - Python/UniFFI: snake_case (e.g., teal_key_value_to_json, teal_key_value_from_json)
    - WASM/TypeScript: camelCase (e.g., tealKeyValueToJsValue, tealKeyValueFromJsValue)
    - This is enforced by passing the snake_case base name to impl_all_json_ffi! for Python, and camelCase for WASM/TS.
    - For msgpack FFI, invoke impl_msgpack_ffi! manually for the subset of models that require it, using the same naming logic.
*/

// Auto-register this model for FFI generation - JSON only
crate::impl_all_json_ffi!(GetStatus200Response, get_status200_response, getStatus200Response);

