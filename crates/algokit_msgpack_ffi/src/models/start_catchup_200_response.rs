/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// StartCatchup200Response : An catchpoint start response.



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct StartCatchup200Response {
    /// Catchup start response string
    #[serde(rename = "catchup-message")]
    
    
    
    pub catchup_message: String,
}

impl StartCatchup200Response {
    /// An catchpoint start response.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(
        catchup_message: String,
    ) -> StartCatchup200Response {
        StartCatchup200Response {
            catchup_message: catchup_message,
        }
    }
}



impl crate::JsonSerializable for StartCatchup200Response {}


crate::auto_impl_json_ffi!(StartCatchup200Response, start_catchup200_response);

