/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApplicationInitialStates : An application's initial global/local/box states that were accessed during simulation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ApplicationInitialStates {
    /// Application index.
    #[serde(rename = "id")]
    
    
    
    pub id: i32,
    /// An application's initial local states tied to different accounts.
    #[serde(rename = "app-locals", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub app_locals: Option<Vec<models::ApplicationKvStorage>>,
    #[serde(rename = "app-globals", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub app_globals: Option<models::ApplicationKvStorage>,
    #[serde(rename = "app-boxes", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub app_boxes: Option<models::ApplicationKvStorage>,
}

impl ApplicationInitialStates {
    /// An application's initial global/local/box states that were accessed during simulation.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    #[cfg_attr(feature = "ffi_wasm", wasm_bindgen(constructor))]
    pub fn new(
        id: i32, app_locals: Option<Vec<models::ApplicationKvStorage>>, app_globals: Option<models::ApplicationKvStorage>, app_boxes: Option<models::ApplicationKvStorage>
    ) -> ApplicationInitialStates {
        ApplicationInitialStates {
            id: id,
            app_locals: app_locals,
            app_globals: app_globals,
            app_boxes: app_boxes,
        }
    }
}

impl crate::JsonSerializable for ApplicationInitialStates {}

impl crate::MsgpackDecodable for ApplicationInitialStates {}

