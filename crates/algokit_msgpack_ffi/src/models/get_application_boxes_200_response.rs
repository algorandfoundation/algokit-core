/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct GetApplicationBoxes200Response {
    /// The round for which this information is relevant.
    #[serde(rename = "round")]
    
    
    
    pub round: i32,
    /// Used for pagination, when making another request provide this token with the next parameter.
    #[serde(rename = "next-token", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub next_token: Option<String>,
    #[serde(rename = "boxes")]
    
    
    
    pub boxes: Vec<models::AlgorandBox>,
}

impl GetApplicationBoxes200Response {
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    #[cfg_attr(feature = "ffi_wasm", wasm_bindgen(constructor))]
    pub fn new(
        round: i32,boxes: Vec<models::AlgorandBox>, next_token: Option<String>,
    ) -> GetApplicationBoxes200Response {
        GetApplicationBoxes200Response {
            round: round,
            next_token: next_token,
            boxes: boxes,
        }
    }
}

impl crate::JsonSerializable for GetApplicationBoxes200Response {}


