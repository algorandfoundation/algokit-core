/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;


#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// TransactionParams200Response : TransactionParams contains the parameters that help a client construct a new transaction.



#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_wasm", serde(rename_all = "camelCase"))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
#[cfg_attr(not(feature = "ffi_wasm"), serde(rename_all = "kebab-case"))]
pub struct TransactionParams200Response {
    /// ConsensusVersion indicates the consensus protocol version as of LastRound.
    
    pub consensus_version: String,
    /// Fee is the suggested transaction fee Fee is in units of micro-Algos per byte. Fee may fall to zero but transactions must still have a fee of at least MinTxnFee for the current network protocol.
    
    pub fee: i32,
    /// GenesisHash is the hash of the genesis block.
    
    #[serde_as(as = "serde_with::base64::Base64")]
    pub genesis_hash: Vec<u8>,
    /// GenesisID is an ID listed in the genesis block.
    
    pub genesis_id: String,
    /// LastRound indicates the last round seen
    
    pub last_round: i32,
    /// The minimum transaction fee (not per byte) required for the txn to validate for the current network protocol.
    
    pub min_fee: i32,
}

impl TransactionParams200Response {
    /// TransactionParams contains the parameters that help a client construct a new transaction.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(consensus_version: String, fee: i32, genesis_hash: Vec<u8>, genesis_id: String, last_round: i32, min_fee: i32, ) -> TransactionParams200Response {
        TransactionParams200Response {
            consensus_version,
            fee,
            genesis_hash,
            genesis_id,
            last_round,
            min_fee,
        }
    }
}



impl crate::JsonSerializable for TransactionParams200Response {}


/*
  FFI method naming conventions:
    - Python/UniFFI: snake_case (e.g., teal_key_value_to_json, teal_key_value_from_json)
    - WASM/TypeScript: camelCase (e.g., tealKeyValueToJson, tealKeyValueFromJson)
    - This is enforced by passing the snake_case base name to impl_all_json_ffi!, and the macro uses paste to generate camelCase for WASM/TS.
    - For msgpack FFI, invoke impl_msgpack_ffi! manually for the subset of models that require it, using the same naming logic.
*/

/*
  FFI method naming conventions:
    - Python/UniFFI: snake_case (e.g., teal_key_value_to_json, teal_key_value_from_json)
    - WASM/TypeScript: camelCase (e.g., tealKeyValueToJsValue, tealKeyValueFromJsValue)
    - This is enforced by passing the snake_case base name to impl_all_json_ffi! for Python, and camelCase for WASM/TS.
    - For msgpack FFI, invoke impl_msgpack_ffi! manually for the subset of models that require it, using the same naming logic.
*/

// Auto-register this model for FFI generation - JSON only
crate::impl_all_json_ffi!(TransactionParams200Response, transaction_params200_response, transactionParams200Response);

