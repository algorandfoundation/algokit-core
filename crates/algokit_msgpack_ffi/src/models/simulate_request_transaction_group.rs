/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::{models, SignedTransaction};
use serde::{Deserialize, Serialize};

/// SimulateRequestTransactionGroup : A transaction group to simulate.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct SimulateRequestTransactionGroup {
    /// An atomic transaction group. Each transaction must be provided as a base64-encoded, canonically encoded SignedTransaction object. Note: This differs from algosdk's simulateTransaction method, which takes an array of SignedTransaction objects and handles the encoding internally.
    #[serde(rename = "txns")]
    pub txns: Vec<SignedTransaction>,
}

impl SimulateRequestTransactionGroup {
    /// A transaction group to simulate.
    pub fn new(txns: Vec<SignedTransaction>) -> SimulateRequestTransactionGroup {
        SimulateRequestTransactionGroup { txns }
    }
}

impl crate::JsonSerializable for SimulateRequestTransactionGroup {}

impl crate::MsgpackEncodable for SimulateRequestTransactionGroup {}
