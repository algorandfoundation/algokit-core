/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DryrunSource : DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into transactions or application state.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct DryrunSource {
    /// FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].
    #[serde(rename = "field-name")]
    
    
    
    pub field_name: String,
    #[serde(rename = "source")]
    
    
    
    pub source: String,
    #[serde(rename = "txn-index")]
    
    
    
    pub txn_index: i32,
    #[serde(rename = "app-index")]
    
    
    
    pub app_index: i32,
}

impl DryrunSource {
    /// DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into transactions or application state.
    pub fn new(field_name: String, source: String, txn_index: i32, app_index: i32) -> DryrunSource {
        DryrunSource {
            field_name,
            source,
            txn_index,
            app_index,
        }
    }
}

impl crate::JsonSerializable for DryrunSource {}

impl crate::MsgpackEncodable for DryrunSource {}

