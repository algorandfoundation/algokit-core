/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// LightBlockHeaderProof : Proof of membership and position of a light block header.



#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct LightBlockHeaderProof {
    /// The index of the light block header in the vector commitment tree
    #[serde(rename = "index")]
    
    
    
    pub index: i32,
    /// Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
    #[serde(rename = "treedepth")]
    
    
    
    pub treedepth: i32,
    /// The encoded proof.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "proof")]
    
    
    
    pub proof: Vec<u8>,
}

impl LightBlockHeaderProof {
    /// Proof of membership and position of a light block header.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(
        index: i32,treedepth: i32,proof: Vec<u8>,
    ) -> LightBlockHeaderProof {
        LightBlockHeaderProof {
            index: index,
            treedepth: treedepth,
            proof: proof,
        }
    }
}



impl crate::JsonSerializable for LightBlockHeaderProof {}


crate::auto_impl_json_ffi!(LightBlockHeaderProof, light_block_header_proof);

