/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AccountAssetHolding : AccountAssetHolding describes the account's asset holding and asset parameters (if either exist) for a specific asset ID.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct AccountAssetHolding {
    #[serde(rename = "asset-holding")]
    
    
    
    pub asset_holding: models::AssetHolding,
    #[serde(rename = "asset-params", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub asset_params: Option<models::AssetParams>,
}

impl AccountAssetHolding {
    /// AccountAssetHolding describes the account's asset holding and asset parameters (if either exist) for a specific asset ID.
    pub fn new(asset_holding: models::AssetHolding) -> AccountAssetHolding {
        AccountAssetHolding {
            asset_holding: asset_holding,
            asset_params: None,
        }
    }
}

impl crate::JsonSerializable for AccountAssetHolding {}


