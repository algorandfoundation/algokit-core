/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};


#[cfg(feature = "ffi_wasm")]
use wasm_bindgen::prelude::wasm_bindgen;

/// ApplicationStateSchema : Specifies maximums on the number of each type that may be stored.



#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_wasm", serde(rename_all = "camelCase"))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
#[cfg_attr(not(feature = "ffi_wasm"), serde(rename_all = "kebab-case"))]
pub struct ApplicationStateSchema {
    /// \\[nui\\] num of uints.
    
    pub num_uint: i32,
    /// \\[nbs\\] num of byte slices.
    
    pub num_byte_slice: i32,
}

impl ApplicationStateSchema {
    /// Specifies maximums on the number of each type that may be stored.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(num_uint: i32, num_byte_slice: i32, ) -> ApplicationStateSchema {
        ApplicationStateSchema {
            num_uint,
            num_byte_slice,
        }
    }
}



impl crate::JsonSerializable for ApplicationStateSchema {}

impl crate::MsgpackEncodable for ApplicationStateSchema {}
impl crate::MsgpackDecodable for ApplicationStateSchema {}

/*
  FFI method naming conventions:
    - Python/UniFFI: snake_case (e.g., teal_key_value_to_json, teal_key_value_from_json)
    - WASM/TypeScript: camelCase (e.g., tealKeyValueToJson, tealKeyValueFromJson)
    - This is enforced by passing the snake_case base name to impl_all_json_ffi!, and the macro uses paste to generate camelCase for WASM/TS.
    - For msgpack FFI, invoke impl_msgpack_ffi! manually for the subset of models that require it, using the same naming logic.
*/

/*
  FFI method naming conventions:
    - Python/UniFFI: snake_case (e.g., teal_key_value_to_json, teal_key_value_from_json)
    - WASM/TypeScript: camelCase (e.g., tealKeyValueToJsValue, tealKeyValueFromJsValue)
    - This is enforced by passing the snake_case base name to impl_all_json_ffi! for Python, and camelCase for WASM/TS.
    - For msgpack FFI, invoke impl_msgpack_ffi! manually for the subset of models that require it, using the same naming logic.
*/

// Auto-register this model for FFI generation - JSON only
crate::impl_all_json_ffi!(ApplicationStateSchema, application_state_schema, applicationStateSchema);

