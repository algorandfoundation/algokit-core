/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApplicationStateSchema : Specifies maximums on the number of each type that may be stored.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ApplicationStateSchema {
    /// \\[nui\\] num of uints.
    #[serde(rename = "num-uint")]
    
    
    
    pub num_uint: i32,
    /// \\[nbs\\] num of byte slices.
    #[serde(rename = "num-byte-slice")]
    
    
    
    pub num_byte_slice: i32,
}

impl ApplicationStateSchema {
    /// Specifies maximums on the number of each type that may be stored.
    pub fn new(num_uint: i32, num_byte_slice: i32) -> ApplicationStateSchema {
        ApplicationStateSchema {
            num_uint,
            num_byte_slice,
        }
    }
}

impl crate::JsonSerializable for ApplicationStateSchema {}

impl crate::MsgpackEncodable for ApplicationStateSchema {}
impl crate::MsgpackDecodable for ApplicationStateSchema {}

