/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct AccountAssetInformation200Response {
    /// The round for which this information is relevant.
    #[serde(rename = "round")]
    
    
    
    pub round: i32,
    #[serde(rename = "asset-holding", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub asset_holding: Option<models::AssetHolding>,
    #[serde(rename = "created-asset", skip_serializing_if = "Option::is_none")]
    
    #[cfg_attr(feature = "ffi_wasm", tsify(optional))]
    #[cfg_attr(feature = "ffi_uniffi", uniffi(default = None))]
    pub created_asset: Option<models::AssetParams>,
}

impl AccountAssetInformation200Response {
    pub fn new(round: i32) -> AccountAssetInformation200Response {
        AccountAssetInformation200Response {
            round,
            asset_holding: None,
            created_asset: None,
        }
    }
}

impl crate::JsonSerializable for AccountAssetInformation200Response {}

impl crate::MsgpackDecodable for AccountAssetInformation200Response {}

