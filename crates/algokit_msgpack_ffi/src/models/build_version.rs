/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_wasm", derive(tsify_next::Tsify))]
#[cfg_attr(feature = "ffi_wasm", tsify(into_wasm_abi, from_wasm_abi))]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct BuildVersion {
    #[serde(rename = "branch")]
    
    
    
    pub branch: String,
    #[serde(rename = "build_number")]
    
    
    
    pub build_number: i64,
    #[serde(rename = "channel")]
    
    
    
    pub channel: String,
    #[serde(rename = "commit_hash")]
    
    
    
    pub commit_hash: String,
    #[serde(rename = "major")]
    
    
    
    pub major: i64,
    #[serde(rename = "minor")]
    
    
    
    pub minor: i64,
}

impl BuildVersion {
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    #[cfg_attr(feature = "ffi_wasm", wasm_bindgen(constructor))]
    pub fn new(
        branch: String,build_number: i64,channel: String,commit_hash: String,major: i64,minor: i64,
    ) -> BuildVersion {
        BuildVersion {
            branch: branch,
            build_number: build_number,
            channel: channel,
            commit_hash: commit_hash,
            major: major,
            minor: minor,
        }
    }
}

impl crate::JsonSerializable for BuildVersion {}


