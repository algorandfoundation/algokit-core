# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
# Optional support for Algorand compact MessagePack via the `algokit_transact`
# Python bindings (built from the Rust crate). We do the import lazily so that
# the generated client can still function even if the optional binary wheel is
# not available on the target platform.
try:
    from algokit_transact import (
        encode_json_to_msgpack as _ak_encode_msgpack,
        decode_msgpack_to_json as _ak_decode_msgpack,
        ModelType as _AkModelType,
    )
except ModuleNotFoundError:  # pragma: no cover – optional dependency
    _ak_encode_msgpack = None  # type: ignore
    _ak_decode_msgpack = None  # type: ignore
    _AkModelType = None  # type: ignore

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AssetParams(BaseModel):
    """
    AssetParams specifies the parameters for an asset.  \\[apar\\] when part of an AssetConfig transaction.  Definition: data/transactions/asset.go : AssetParams
    """ # noqa: E501
    clawback: Optional[StrictStr] = Field(default=None, description="\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.")
    creator: StrictStr = Field(description="The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.")
    decimals: Annotated[int, Field(le=19, strict=True, ge=0)] = Field(description="\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).")
    default_frozen: Optional[StrictBool] = Field(default=None, description="\\[df\\] Whether holdings of this asset are frozen by default.", alias="default-frozen")
    freeze: Optional[StrictStr] = Field(default=None, description="\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.")
    manager: Optional[StrictStr] = Field(default=None, description="\\[m\\] Address of account used to manage the keys of this asset and to destroy it.")
    metadata_hash: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.", alias="metadata-hash")
    name: Optional[StrictStr] = Field(default=None, description="\\[an\\] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.")
    name_b64: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="Base64 encoded name of this asset, as supplied by the creator.", alias="name-b64")
    reserve: Optional[StrictStr] = Field(default=None, description="\\[r\\] Address of account holding reserve (non-minted) units of this asset.")
    total: StrictInt = Field(description="\\[t\\] The total number of units of this asset.")
    unit_name: Optional[StrictStr] = Field(default=None, description="\\[un\\] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.", alias="unit-name")
    unit_name_b64: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="Base64 encoded name of a unit of this asset, as supplied by the creator.", alias="unit-name-b64")
    url: Optional[StrictStr] = Field(default=None, description="\\[au\\] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.")
    url_b64: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="Base64 encoded URL where more information about the asset can be retrieved.", alias="url-b64")
    __properties: ClassVar[List[str]] = ["clawback", "creator", "decimals", "default-frozen", "freeze", "manager", "metadata-hash", "name", "name-b64", "reserve", "total", "unit-name", "unit-name-b64", "url", "url-b64"]

    @field_validator('metadata_hash')
    def metadata_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    @field_validator('name_b64')
    def name_b64_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    @field_validator('unit_name_b64')
    def unit_name_b64_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    @field_validator('url_b64')
    def url_b64_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clawback": obj.get("clawback"),
            "creator": obj.get("creator"),
            "decimals": obj.get("decimals"),
            "default-frozen": obj.get("default-frozen"),
            "freeze": obj.get("freeze"),
            "manager": obj.get("manager"),
            "metadata-hash": obj.get("metadata-hash"),
            "name": obj.get("name"),
            "name-b64": obj.get("name-b64"),
            "reserve": obj.get("reserve"),
            "total": obj.get("total"),
            "unit-name": obj.get("unit-name"),
            "unit-name-b64": obj.get("unit-name-b64"),
            "url": obj.get("url"),
            "url-b64": obj.get("url-b64")
        })
        return _obj

    def to_msgpack(self) -> bytes:  # pragma: no cover – thin wrapper
        """Return the compact Algorand MessagePack representation of this model.

        Requires the optional ``algokit_transact`` binary package to be
        installed. If the model is not one of the types supported by that
        package (for example *SimulateRequest* or *SimulateTransaction200Response*)
        a :class:`NotImplementedError` is raised.
        """
        if _ak_encode_msgpack is None or _AkModelType is None:
            raise RuntimeError(
                "algokit_transact is not available — install the algokit_transact package"
                "to use MessagePack helpers"
            )

        try:
            model_type = _AkModelType[self.__class__.__name__]
        except KeyError as exc:  # pragma: no cover
            # Fallback: convert CamelCase -> UPPER_SNAKE_CASE (SimulateRequest -> SIMULATE_REQUEST)
            variant_name = re.sub(r'(?<!^)(?=[A-Z])', '_', self.__class__.__name__).upper()
            try:
                model_type = _AkModelType[variant_name]
            except KeyError as exc:  # pragma: no cover
                raise NotImplementedError(
                    f"Model {self.__class__.__name__} ({variant_name}) is not supported by algokit_transact"
                ) from exc

        return _ak_encode_msgpack(model_type, self.to_json())  # type: ignore[arg-type]

    @classmethod
    def from_msgpack(cls, data: bytes) -> "Self":  # pragma: no cover – thin wrapper
        """Create a new instance from Algorand MessagePack *data*.

        The inverse of :pymeth:`to_msgpack`. Requires
        ``algokit_transact`` to be importable.
        """
        if _ak_decode_msgpack is None or _AkModelType is None:
            raise RuntimeError(
                "algokit_transact is not available — install the algokit_transact package"
                "to use MessagePack helpers"
            )

        try:
            model_type = _AkModelType[cls.__name__]
        except KeyError as exc:  # pragma: no cover
            variant_name = re.sub(r'(?<!^)(?=[A-Z])', '_', cls.__name__).upper()
            try:
                model_type = _AkModelType[variant_name]
            except KeyError as exc:  # pragma: no cover
                raise NotImplementedError(
                    f"Model {cls.__name__} ({variant_name}) is not supported by algokit_transact"
                ) from exc

        json_str = _ak_decode_msgpack(model_type, data)  # type: ignore[arg-type]
        return cls.from_json(json_str)


