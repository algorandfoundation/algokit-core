# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
# Optional support for Algorand compact MessagePack via the `algokit_transact`
# Python bindings (built from the Rust crate). We do the import lazily so that
# the generated client can still function even if the optional binary wheel is
# not available on the target platform.
try:
    from algokit_transact import (
        encode_json_to_msgpack as _ak_encode_msgpack,
        decode_msgpack_to_json as _ak_decode_msgpack,
        ModelType as _AkModelType,
    )
except ModuleNotFoundError:  # pragma: no cover – optional dependency
    _ak_encode_msgpack = None  # type: ignore
    _ak_decode_msgpack = None  # type: ignore
    _AkModelType = None  # type: ignore

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from algokit_algod_api.models.simulate_request_transaction_group import SimulateRequestTransactionGroup
from algokit_algod_api.models.simulate_trace_config import SimulateTraceConfig
from typing import Optional, Set
from typing_extensions import Self

class SimulateRequest(BaseModel):
    """
    Request type for simulation endpoint.
    """ # noqa: E501
    txn_groups: List[SimulateRequestTransactionGroup] = Field(description="The transaction groups to simulate.", alias="txn-groups")
    round: Optional[StrictInt] = Field(default=None, description="If provided, specifies the round preceding the simulation. State changes through this round will be used to run this simulation. Usually only the 4 most recent rounds will be available (controlled by the node config value MaxAcctLookback). If not specified, defaults to the latest available round.")
    allow_empty_signatures: Optional[StrictBool] = Field(default=None, description="Allows transactions without signatures to be simulated as if they had correct signatures.", alias="allow-empty-signatures")
    allow_more_logging: Optional[StrictBool] = Field(default=None, description="Lifts limits on log opcode usage during simulation.", alias="allow-more-logging")
    allow_unnamed_resources: Optional[StrictBool] = Field(default=None, description="Allows access to unnamed resources during simulation.", alias="allow-unnamed-resources")
    extra_opcode_budget: Optional[StrictInt] = Field(default=None, description="Applies extra opcode budget during simulation for each transaction group.", alias="extra-opcode-budget")
    exec_trace_config: Optional[SimulateTraceConfig] = Field(default=None, alias="exec-trace-config")
    fix_signers: Optional[StrictBool] = Field(default=None, description="If true, signers for transactions that are missing signatures will be fixed during evaluation.", alias="fix-signers")
    __properties: ClassVar[List[str]] = ["txn-groups", "round", "allow-empty-signatures", "allow-more-logging", "allow-unnamed-resources", "extra-opcode-budget", "exec-trace-config", "fix-signers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in txn_groups (list)
        _items = []
        if self.txn_groups:
            for _item_txn_groups in self.txn_groups:
                if _item_txn_groups:
                    _items.append(_item_txn_groups.to_dict())
            _dict['txn-groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of exec_trace_config
        if self.exec_trace_config:
            _dict['exec-trace-config'] = self.exec_trace_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "txn-groups": [SimulateRequestTransactionGroup.from_dict(_item) for _item in obj["txn-groups"]] if obj.get("txn-groups") is not None else None,
            "round": obj.get("round"),
            "allow-empty-signatures": obj.get("allow-empty-signatures"),
            "allow-more-logging": obj.get("allow-more-logging"),
            "allow-unnamed-resources": obj.get("allow-unnamed-resources"),
            "extra-opcode-budget": obj.get("extra-opcode-budget"),
            "exec-trace-config": SimulateTraceConfig.from_dict(obj["exec-trace-config"]) if obj.get("exec-trace-config") is not None else None,
            "fix-signers": obj.get("fix-signers")
        })
        return _obj

    def to_msgpack(self) -> bytes:  # pragma: no cover – thin wrapper
        """Return the compact Algorand MessagePack representation of this model.

        Requires the optional ``algokit_transact`` binary package to be
        installed. If the model is not one of the types supported by that
        package (for example *SimulateRequest* or *SimulateTransaction200Response*)
        a :class:`NotImplementedError` is raised.
        """
        if _ak_encode_msgpack is None or _AkModelType is None:
            raise RuntimeError(
                "algokit_transact is not available — install the algokit_transact package"
                "to use MessagePack helpers"
            )

        try:
            model_type = _AkModelType[self.__class__.__name__]
        except KeyError as exc:  # pragma: no cover
            # Fallback: convert CamelCase -> UPPER_SNAKE_CASE (SimulateRequest -> SIMULATE_REQUEST)
            variant_name = re.sub(r'(?<!^)(?=[A-Z])', '_', self.__class__.__name__).upper()
            try:
                model_type = _AkModelType[variant_name]
            except KeyError as exc:  # pragma: no cover
                raise NotImplementedError(
                    f"Model {self.__class__.__name__} ({variant_name}) is not supported by algokit_transact"
                ) from exc

        return _ak_encode_msgpack(model_type, self.to_json())  # type: ignore[arg-type]

    @classmethod
    def from_msgpack(cls, data: bytes) -> "Self":  # pragma: no cover – thin wrapper
        """Create a new instance from Algorand MessagePack *data*.

        The inverse of :pymeth:`to_msgpack`. Requires
        ``algokit_transact`` to be importable.
        """
        if _ak_decode_msgpack is None or _AkModelType is None:
            raise RuntimeError(
                "algokit_transact is not available — install the algokit_transact package"
                "to use MessagePack helpers"
            )

        try:
            model_type = _AkModelType[cls.__name__]
        except KeyError as exc:  # pragma: no cover
            variant_name = re.sub(r'(?<!^)(?=[A-Z])', '_', cls.__name__).upper()
            try:
                model_type = _AkModelType[variant_name]
            except KeyError as exc:  # pragma: no cover
                raise NotImplementedError(
                    f"Model {cls.__name__} ({variant_name}) is not supported by algokit_transact"
                ) from exc

        json_str = _ak_decode_msgpack(model_type, data)  # type: ignore[arg-type]
        return cls.from_json(json_str)


