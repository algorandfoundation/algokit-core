# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
# Optional support for Algorand compact MessagePack via the `algokit_msgpack`
# Python bindings (built from the Rust crate). We do the import lazily so that
# the generated client can still function even if the optional binary wheel is
# not available on the target platform.
try:
    from algokit_msgpack import (
        encode_json_to_msgpack_ffi as _ak_encode_msgpack,
        decode_msgpack_to_json_ffi as _ak_decode_msgpack,
        ModelType as _AkModelType,
    )
except ModuleNotFoundError:  # pragma: no cover – optional dependency
    _ak_encode_msgpack = None  # type: ignore
    _ak_decode_msgpack = None  # type: ignore
    _AkModelType = None  # type: ignore

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from algokit_algod_api.models.application_state_operation import ApplicationStateOperation
from algokit_algod_api.models.avm_value import AvmValue
from algokit_algod_api.models.scratch_change import ScratchChange
from typing import Optional, Set
from typing_extensions import Self

class SimulationOpcodeTraceUnit(BaseModel):
    """
    The set of trace information and effect from evaluating a single opcode.
    """ # noqa: E501
    pc: StrictInt = Field(description="The program counter of the current opcode being evaluated.")
    scratch_changes: Optional[List[ScratchChange]] = Field(default=None, description="The writes into scratch slots.", alias="scratch-changes")
    state_changes: Optional[List[ApplicationStateOperation]] = Field(default=None, description="The operations against the current application's states.", alias="state-changes")
    spawned_inners: Optional[List[StrictInt]] = Field(default=None, description="The indexes of the traces for inner transactions spawned by this opcode, if any.", alias="spawned-inners")
    stack_pop_count: Optional[StrictInt] = Field(default=None, description="The number of deleted stack values by this opcode.", alias="stack-pop-count")
    stack_additions: Optional[List[AvmValue]] = Field(default=None, description="The values added by this opcode to the stack.", alias="stack-additions")
    __properties: ClassVar[List[str]] = ["pc", "scratch-changes", "state-changes", "spawned-inners", "stack-pop-count", "stack-additions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulationOpcodeTraceUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in scratch_changes (list)
        _items = []
        if self.scratch_changes:
            for _item_scratch_changes in self.scratch_changes:
                if _item_scratch_changes:
                    _items.append(_item_scratch_changes.to_dict())
            _dict['scratch-changes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in state_changes (list)
        _items = []
        if self.state_changes:
            for _item_state_changes in self.state_changes:
                if _item_state_changes:
                    _items.append(_item_state_changes.to_dict())
            _dict['state-changes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stack_additions (list)
        _items = []
        if self.stack_additions:
            for _item_stack_additions in self.stack_additions:
                if _item_stack_additions:
                    _items.append(_item_stack_additions.to_dict())
            _dict['stack-additions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulationOpcodeTraceUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pc": obj.get("pc"),
            "scratch-changes": [ScratchChange.from_dict(_item) for _item in obj["scratch-changes"]] if obj.get("scratch-changes") is not None else None,
            "state-changes": [ApplicationStateOperation.from_dict(_item) for _item in obj["state-changes"]] if obj.get("state-changes") is not None else None,
            "spawned-inners": obj.get("spawned-inners"),
            "stack-pop-count": obj.get("stack-pop-count"),
            "stack-additions": [AvmValue.from_dict(_item) for _item in obj["stack-additions"]] if obj.get("stack-additions") is not None else None
        })
        return _obj

    def to_msgpack(self) -> bytes:  # pragma: no cover – thin wrapper
        """Return the compact Algorand MessagePack representation of this model.

        Requires the optional ``algokit_msgpack`` binary package to be
        installed. If the model is not one of the types supported by that
        package (for example *SimulateRequest* or *SimulateTransaction200Response*)
        a :class:`NotImplementedError` is raised.
        """
        if _ak_encode_msgpack is None or _AkModelType is None:
            raise RuntimeError(
                "algokit_msgpack is not available — install the extra binary wheel "
                "to use MessagePack helpers"
            )

        try:
            model_type = _AkModelType[self.__class__.__name__]
        except KeyError as exc:  # pragma: no cover
            # Fallback: convert CamelCase -> UPPER_SNAKE_CASE (SimulateRequest -> SIMULATE_REQUEST)
            variant_name = re.sub(r'(?<!^)(?=[A-Z])', '_', self.__class__.__name__).upper()
            try:
                model_type = _AkModelType[variant_name]
            except KeyError as exc:  # pragma: no cover
                raise NotImplementedError(
                    f"Model {self.__class__.__name__} ({variant_name}) is not supported by algokit_msgpack"
                ) from exc

        return _ak_encode_msgpack(model_type, self.to_json())  # type: ignore[arg-type]

    @classmethod
    def from_msgpack(cls, data: bytes) -> "Self":  # pragma: no cover – thin wrapper
        """Create a new instance from Algorand MessagePack *data*.

        The inverse of :pymeth:`to_msgpack`. Requires
        ``algokit_msgpack`` to be importable.
        """
        if _ak_decode_msgpack is None or _AkModelType is None:
            raise RuntimeError(
                "algokit_msgpack is not available — install the extra binary wheel "
                "to use MessagePack helpers"
            )

        try:
            model_type = _AkModelType[cls.__name__]
        except KeyError as exc:  # pragma: no cover
            variant_name = re.sub(r'(?<!^)(?=[A-Z])', '_', cls.__name__).upper()
            try:
                model_type = _AkModelType[variant_name]
            except KeyError as exc:  # pragma: no cover
                raise NotImplementedError(
                    f"Model {cls.__name__} ({variant_name}) is not supported by algokit_msgpack"
                ) from exc

        json_str = _ak_decode_msgpack(model_type, data)  # type: ignore[arg-type]
        return cls.from_json(json_str)


