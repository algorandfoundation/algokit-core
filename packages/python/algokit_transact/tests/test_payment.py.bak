from pathlib import Path
import json
from pprint import pprint
from algokit_transact import (
    Address,
    TransactionHeader,
    encode_transaction,
    PayTransactionFields,
    TransactionType,
    attach_signature,
    decode_transaction,
    get_encoded_transaction_type,
    AlgoKitTransactError,
    Transaction,
    address_from_string,
    address_from_pub_key,
)
from nacl.signing import SigningKey
import nacl
import pytest
from copy import deepcopy


def convert_values(obj):
    if isinstance(obj, dict):
        if "address" in obj and "pub_key" in obj:
            pprint(Address(**obj))
            return Address(address=obj["address"], pub_key=bytes(obj["pub_key"]))
        return {key: convert_values(value) for key, value in obj.items()}
    elif isinstance(obj, list) and all(isinstance(x, int) for x in obj):
        return bytes(obj)
    elif isinstance(obj, list):
        return [convert_values(x) for x in obj]
    return obj


def camel_to_snake(name):
    import re

    name = re.sub("(.)([A-Z][a-z]+)", r"\1_\2", name)
    return re.sub("([a-z0-9])([A-Z])", r"\1_\2", name).lower()


def convert_case_recursive(obj):
    if isinstance(obj, dict):
        return {
            camel_to_snake(key): convert_case_recursive(value)
            for key, value in obj.items()
        }
    elif isinstance(obj, list):
        return [convert_case_recursive(x) for x in obj]
    return obj


def load_test_data():
    # Get the path to test_data.json relative to this test file
    test_data_path = (
        Path(__file__).parent.parent.parent.parent.parent
        / "crates"
        / "algokit_transact_ffi"
        / "test_data.json"
    )

    with open(test_data_path) as f:
        data = json.load(f)

    data = convert_case_recursive(data)
    data = convert_values(data)

    data["transaction"]["header"]["transaction_type"] = TransactionType.PAYMENT

    data["transaction"]["header"] = TransactionHeader(**data["transaction"]["header"])

    data["transaction"] = Transaction(
        header=data["transaction"]["header"],
        pay_fields=PayTransactionFields(**data["transaction"]["pay_fields"]),
    )

    return data


TEST_DATA = load_test_data()
PRIV_KEY = SigningKey(TEST_DATA["priv_key"])


def test_encode():
    assert (
        encode_transaction(TEST_DATA["transaction"])
        == TEST_DATA["expected_bytes_for_signing"]
    )


def test_encode_with_signature():
    sig = PRIV_KEY.sign(TEST_DATA["expected_bytes_for_signing"]).signature
    print(len(sig))
    signed_tx = attach_signature(TEST_DATA["expected_bytes_for_signing"], sig)
    assert signed_tx == TEST_DATA["expected_signed_txn"]


def test_decode_with_tx_prefix():
    assert (
        decode_transaction(TEST_DATA["expected_bytes_for_signing"])
        == TEST_DATA["transaction"]
    )


def test_decode_without_tx_prefix():
    assert (
        decode_transaction(TEST_DATA["expected_bytes_for_signing"][2:])
        == TEST_DATA["transaction"]
    )


def test_get_encoded_transaction_type():
    assert (
        get_encoded_transaction_type(TEST_DATA["expected_bytes_for_signing"])
        == TransactionType.PAYMENT
    )


def test_decoding_error_0_bytes():
    with pytest.raises(
        AlgoKitTransactError.DecodingError, match="attempted to decode 0 bytes"
    ):
        decode_transaction(bytes())


def test_decoding_error_malformed_bytes():
    bad_bytes = bytearray(TEST_DATA["expected_bytes_for_signing"])[13:37]
    with pytest.raises(
        AlgoKitTransactError.DecodingError,
    ):
        decode_transaction(bad_bytes)


def test_error_invalid_type():
    bad_fields: PayTransactionFields = deepcopy(TEST_DATA["transaction"])
    bad_fields.header.fee = "foo"
    with pytest.raises(
        TypeError,
        match="'str' object cannot be interpreted as an integer",
    ):
        encode_transaction(bad_fields)


def test_example():
    alice_keypair = SigningKey.generate()  # Keypair generated from PyNaCl
    alice = address_from_pub_key(alice_keypair.verify_key.__bytes__())
    bob = address_from_string(
        "B72WNFFEZ7EOGMQPP7ROHYS3DSLL5JW74QASYNWGZGQXWRPJECJJLJIJ2Y"
    )

    txn = Transaction(
        header=TransactionHeader(
            transaction_type=TransactionType.PAYMENT,
            fee=1000,
            first_valid=1337,
            last_valid=1347,
            sender=alice,
            genesis_hash=b"A" * 32,  # pretend this is a valid hash
            genesis_id="localnet",
        ),
        pay_fields=PayTransactionFields(amount=1337, receiver=bob),
    )

    sig = alice_keypair.sign(encode_transaction(txn)).signature
    signed_txn = attach_signature(encode_transaction(txn), sig)
