// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(algokit_transactFFI)
import algokit_transactFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_algokit_transact_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_algokit_transact_ffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}


public struct Address {
    public var address: String
    public var pubKey: ByteBuf

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, pubKey: ByteBuf) {
        self.address = address
        self.pubKey = pubKey
    }
}



extension Address: Equatable, Hashable {
    public static func ==(lhs: Address, rhs: Address) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.pubKey != rhs.pubKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(pubKey)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAddress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Address {
        return
            try Address(
                address: FfiConverterString.read(from: &buf), 
                pubKey: FfiConverterTypeByteBuf.read(from: &buf)
        )
    }

    public static func write(_ value: Address, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterTypeByteBuf.write(value.pubKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lift(_ buf: RustBuffer) throws -> Address {
    return try FfiConverterTypeAddress.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAddress_lower(_ value: Address) -> RustBuffer {
    return FfiConverterTypeAddress.lower(value)
}


public struct AssetTransferTransactionFields {
    public var assetId: UInt64
    public var amount: UInt64
    public var receiver: Address
    public var assetSender: Address?
    public var closeRemainderTo: Address?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(assetId: UInt64, amount: UInt64, receiver: Address, assetSender: Address? = nil, closeRemainderTo: Address? = nil) {
        self.assetId = assetId
        self.amount = amount
        self.receiver = receiver
        self.assetSender = assetSender
        self.closeRemainderTo = closeRemainderTo
    }
}



extension AssetTransferTransactionFields: Equatable, Hashable {
    public static func ==(lhs: AssetTransferTransactionFields, rhs: AssetTransferTransactionFields) -> Bool {
        if lhs.assetId != rhs.assetId {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.receiver != rhs.receiver {
            return false
        }
        if lhs.assetSender != rhs.assetSender {
            return false
        }
        if lhs.closeRemainderTo != rhs.closeRemainderTo {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(assetId)
        hasher.combine(amount)
        hasher.combine(receiver)
        hasher.combine(assetSender)
        hasher.combine(closeRemainderTo)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAssetTransferTransactionFields: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetTransferTransactionFields {
        return
            try AssetTransferTransactionFields(
                assetId: FfiConverterUInt64.read(from: &buf), 
                amount: FfiConverterUInt64.read(from: &buf), 
                receiver: FfiConverterTypeAddress.read(from: &buf), 
                assetSender: FfiConverterOptionTypeAddress.read(from: &buf), 
                closeRemainderTo: FfiConverterOptionTypeAddress.read(from: &buf)
        )
    }

    public static func write(_ value: AssetTransferTransactionFields, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.assetId, into: &buf)
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterTypeAddress.write(value.receiver, into: &buf)
        FfiConverterOptionTypeAddress.write(value.assetSender, into: &buf)
        FfiConverterOptionTypeAddress.write(value.closeRemainderTo, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetTransferTransactionFields_lift(_ buf: RustBuffer) throws -> AssetTransferTransactionFields {
    return try FfiConverterTypeAssetTransferTransactionFields.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetTransferTransactionFields_lower(_ value: AssetTransferTransactionFields) -> RustBuffer {
    return FfiConverterTypeAssetTransferTransactionFields.lower(value)
}


public struct PaymentTransactionFields {
    public var receiver: Address
    public var amount: UInt64
    public var closeRemainderTo: Address?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(receiver: Address, amount: UInt64, closeRemainderTo: Address? = nil) {
        self.receiver = receiver
        self.amount = amount
        self.closeRemainderTo = closeRemainderTo
    }
}



extension PaymentTransactionFields: Equatable, Hashable {
    public static func ==(lhs: PaymentTransactionFields, rhs: PaymentTransactionFields) -> Bool {
        if lhs.receiver != rhs.receiver {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.closeRemainderTo != rhs.closeRemainderTo {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(receiver)
        hasher.combine(amount)
        hasher.combine(closeRemainderTo)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePaymentTransactionFields: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaymentTransactionFields {
        return
            try PaymentTransactionFields(
                receiver: FfiConverterTypeAddress.read(from: &buf), 
                amount: FfiConverterUInt64.read(from: &buf), 
                closeRemainderTo: FfiConverterOptionTypeAddress.read(from: &buf)
        )
    }

    public static func write(_ value: PaymentTransactionFields, into buf: inout [UInt8]) {
        FfiConverterTypeAddress.write(value.receiver, into: &buf)
        FfiConverterUInt64.write(value.amount, into: &buf)
        FfiConverterOptionTypeAddress.write(value.closeRemainderTo, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentTransactionFields_lift(_ buf: RustBuffer) throws -> PaymentTransactionFields {
    return try FfiConverterTypePaymentTransactionFields.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaymentTransactionFields_lower(_ value: PaymentTransactionFields) -> RustBuffer {
    return FfiConverterTypePaymentTransactionFields.lower(value)
}


public struct Transaction {
    public var header: TransactionHeader
    public var payment: PaymentTransactionFields?
    public var assetTransfer: AssetTransferTransactionFields?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(header: TransactionHeader, payment: PaymentTransactionFields? = nil, assetTransfer: AssetTransferTransactionFields? = nil) {
        self.header = header
        self.payment = payment
        self.assetTransfer = assetTransfer
    }
}



extension Transaction: Equatable, Hashable {
    public static func ==(lhs: Transaction, rhs: Transaction) -> Bool {
        if lhs.header != rhs.header {
            return false
        }
        if lhs.payment != rhs.payment {
            return false
        }
        if lhs.assetTransfer != rhs.assetTransfer {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(header)
        hasher.combine(payment)
        hasher.combine(assetTransfer)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Transaction {
        return
            try Transaction(
                header: FfiConverterTypeTransactionHeader.read(from: &buf), 
                payment: FfiConverterOptionTypePaymentTransactionFields.read(from: &buf), 
                assetTransfer: FfiConverterOptionTypeAssetTransferTransactionFields.read(from: &buf)
        )
    }

    public static func write(_ value: Transaction, into buf: inout [UInt8]) {
        FfiConverterTypeTransactionHeader.write(value.header, into: &buf)
        FfiConverterOptionTypePaymentTransactionFields.write(value.payment, into: &buf)
        FfiConverterOptionTypeAssetTransferTransactionFields.write(value.assetTransfer, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lift(_ buf: RustBuffer) throws -> Transaction {
    return try FfiConverterTypeTransaction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lower(_ value: Transaction) -> RustBuffer {
    return FfiConverterTypeTransaction.lower(value)
}


/**
 * The transaction header contains the fields that can be present in any transaction.
 * "Header" only indicates that these are common fields, NOT that they are the first fields in the transaction.
 */
public struct TransactionHeader {
    /**
     * The type of transaction
     */
    public var transactionType: TransactionType
    /**
     * The sender of the transaction
     */
    public var sender: Address
    public var fee: UInt64
    public var firstValid: UInt64
    public var lastValid: UInt64
    public var genesisHash: ByteBuf?
    public var genesisId: String?
    public var note: ByteBuf?
    public var rekeyTo: Address?
    public var lease: ByteBuf?
    public var group: ByteBuf?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The type of transaction
         */transactionType: TransactionType, 
        /**
         * The sender of the transaction
         */sender: Address, fee: UInt64, firstValid: UInt64, lastValid: UInt64, genesisHash: ByteBuf?, genesisId: String?, note: ByteBuf? = nil, rekeyTo: Address? = nil, lease: ByteBuf? = nil, group: ByteBuf? = nil) {
        self.transactionType = transactionType
        self.sender = sender
        self.fee = fee
        self.firstValid = firstValid
        self.lastValid = lastValid
        self.genesisHash = genesisHash
        self.genesisId = genesisId
        self.note = note
        self.rekeyTo = rekeyTo
        self.lease = lease
        self.group = group
    }
}



extension TransactionHeader: Equatable, Hashable {
    public static func ==(lhs: TransactionHeader, rhs: TransactionHeader) -> Bool {
        if lhs.transactionType != rhs.transactionType {
            return false
        }
        if lhs.sender != rhs.sender {
            return false
        }
        if lhs.fee != rhs.fee {
            return false
        }
        if lhs.firstValid != rhs.firstValid {
            return false
        }
        if lhs.lastValid != rhs.lastValid {
            return false
        }
        if lhs.genesisHash != rhs.genesisHash {
            return false
        }
        if lhs.genesisId != rhs.genesisId {
            return false
        }
        if lhs.note != rhs.note {
            return false
        }
        if lhs.rekeyTo != rhs.rekeyTo {
            return false
        }
        if lhs.lease != rhs.lease {
            return false
        }
        if lhs.group != rhs.group {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(transactionType)
        hasher.combine(sender)
        hasher.combine(fee)
        hasher.combine(firstValid)
        hasher.combine(lastValid)
        hasher.combine(genesisHash)
        hasher.combine(genesisId)
        hasher.combine(note)
        hasher.combine(rekeyTo)
        hasher.combine(lease)
        hasher.combine(group)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionHeader: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionHeader {
        return
            try TransactionHeader(
                transactionType: FfiConverterTypeTransactionType.read(from: &buf), 
                sender: FfiConverterTypeAddress.read(from: &buf), 
                fee: FfiConverterUInt64.read(from: &buf), 
                firstValid: FfiConverterUInt64.read(from: &buf), 
                lastValid: FfiConverterUInt64.read(from: &buf), 
                genesisHash: FfiConverterOptionTypeByteBuf.read(from: &buf), 
                genesisId: FfiConverterOptionString.read(from: &buf), 
                note: FfiConverterOptionTypeByteBuf.read(from: &buf), 
                rekeyTo: FfiConverterOptionTypeAddress.read(from: &buf), 
                lease: FfiConverterOptionTypeByteBuf.read(from: &buf), 
                group: FfiConverterOptionTypeByteBuf.read(from: &buf)
        )
    }

    public static func write(_ value: TransactionHeader, into buf: inout [UInt8]) {
        FfiConverterTypeTransactionType.write(value.transactionType, into: &buf)
        FfiConverterTypeAddress.write(value.sender, into: &buf)
        FfiConverterUInt64.write(value.fee, into: &buf)
        FfiConverterUInt64.write(value.firstValid, into: &buf)
        FfiConverterUInt64.write(value.lastValid, into: &buf)
        FfiConverterOptionTypeByteBuf.write(value.genesisHash, into: &buf)
        FfiConverterOptionString.write(value.genesisId, into: &buf)
        FfiConverterOptionTypeByteBuf.write(value.note, into: &buf)
        FfiConverterOptionTypeAddress.write(value.rekeyTo, into: &buf)
        FfiConverterOptionTypeByteBuf.write(value.lease, into: &buf)
        FfiConverterOptionTypeByteBuf.write(value.group, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionHeader_lift(_ buf: RustBuffer) throws -> TransactionHeader {
    return try FfiConverterTypeTransactionHeader.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionHeader_lower(_ value: TransactionHeader) -> RustBuffer {
    return FfiConverterTypeTransactionHeader.lower(value)
}


public enum AlgoKitTransactError {

    
    
    case EncodingError(String
    )
    case DecodingError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAlgoKitTransactError: FfiConverterRustBuffer {
    typealias SwiftType = AlgoKitTransactError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AlgoKitTransactError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .EncodingError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .DecodingError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AlgoKitTransactError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .EncodingError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .DecodingError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


extension AlgoKitTransactError: Equatable, Hashable {}

extension AlgoKitTransactError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TransactionType {
    
    case payment
    case assetTransfer
    case assetFreeze
    case assetConfig
    case keyRegistration
    case applicationCall
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionType: FfiConverterRustBuffer {
    typealias SwiftType = TransactionType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .payment
        
        case 2: return .assetTransfer
        
        case 3: return .assetFreeze
        
        case 4: return .assetConfig
        
        case 5: return .keyRegistration
        
        case 6: return .applicationCall
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransactionType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .payment:
            writeInt(&buf, Int32(1))
        
        
        case .assetTransfer:
            writeInt(&buf, Int32(2))
        
        
        case .assetFreeze:
            writeInt(&buf, Int32(3))
        
        
        case .assetConfig:
            writeInt(&buf, Int32(4))
        
        
        case .keyRegistration:
            writeInt(&buf, Int32(5))
        
        
        case .applicationCall:
            writeInt(&buf, Int32(6))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionType_lift(_ buf: RustBuffer) throws -> TransactionType {
    return try FfiConverterTypeTransactionType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionType_lower(_ value: TransactionType) -> RustBuffer {
    return FfiConverterTypeTransactionType.lower(value)
}



extension TransactionType: Equatable, Hashable {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAddress: FfiConverterRustBuffer {
    typealias SwiftType = Address?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAddress.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAddress.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAssetTransferTransactionFields: FfiConverterRustBuffer {
    typealias SwiftType = AssetTransferTransactionFields?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAssetTransferTransactionFields.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAssetTransferTransactionFields.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypePaymentTransactionFields: FfiConverterRustBuffer {
    typealias SwiftType = PaymentTransactionFields?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePaymentTransactionFields.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePaymentTransactionFields.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeByteBuf: FfiConverterRustBuffer {
    typealias SwiftType = ByteBuf?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeByteBuf.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeByteBuf.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ByteBuf = Data

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeByteBuf: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ByteBuf {
        return try FfiConverterData.read(from: &buf)
    }

    public static func write(_ value: ByteBuf, into buf: inout [UInt8]) {
        return FfiConverterData.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ByteBuf {
        return try FfiConverterData.lift(value)
    }

    public static func lower(_ value: ByteBuf) -> RustBuffer {
        return FfiConverterData.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeByteBuf_lift(_ value: RustBuffer) throws -> ByteBuf {
    return try FfiConverterTypeByteBuf.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeByteBuf_lower(_ value: ByteBuf) -> RustBuffer {
    return FfiConverterTypeByteBuf.lower(value)
}

public func addressFromPubKey(pubKey: Data)throws  -> Address {
    return try  FfiConverterTypeAddress.lift(try rustCallWithError(FfiConverterTypeAlgoKitTransactError.lift) {
    uniffi_algokit_transact_ffi_fn_func_address_from_pub_key(
        FfiConverterData.lower(pubKey),$0
    )
})
}
public func addressFromString(address: String)throws  -> Address {
    return try  FfiConverterTypeAddress.lift(try rustCallWithError(FfiConverterTypeAlgoKitTransactError.lift) {
    uniffi_algokit_transact_ffi_fn_func_address_from_string(
        FfiConverterString.lower(address),$0
    )
})
}
public func attachSignature(encodedTx: Data, signature: Data)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeAlgoKitTransactError.lift) {
    uniffi_algokit_transact_ffi_fn_func_attach_signature(
        FfiConverterData.lower(encodedTx),
        FfiConverterData.lower(signature),$0
    )
})
}
public func decodeTransaction(bytes: Data)throws  -> Transaction {
    return try  FfiConverterTypeTransaction.lift(try rustCallWithError(FfiConverterTypeAlgoKitTransactError.lift) {
    uniffi_algokit_transact_ffi_fn_func_decode_transaction(
        FfiConverterData.lower(bytes),$0
    )
})
}
/**
 * Encode the transaction with the domain separation (e.g. "TX") prefix
 */
public func encodeTransaction(tx: Transaction)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeAlgoKitTransactError.lift) {
    uniffi_algokit_transact_ffi_fn_func_encode_transaction(
        FfiConverterTypeTransaction.lower(tx),$0
    )
})
}
/**
 * Encode the transaction without the domain separation (e.g. "TX") prefix
 * This is useful for encoding the transaction for signing with tools that automatically add "TX" prefix to the transaction bytes.
 */
public func encodeTransactionRaw(tx: Transaction)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeAlgoKitTransactError.lift) {
    uniffi_algokit_transact_ffi_fn_func_encode_transaction_raw(
        FfiConverterTypeTransaction.lower(tx),$0
    )
})
}
/**
 * Get the transaction type from the encoded transaction.
 * This is particularly useful when decoding a transaction that has an unknown type
 */
public func getEncodedTransactionType(bytes: Data)throws  -> TransactionType {
    return try  FfiConverterTypeTransactionType.lift(try rustCallWithError(FfiConverterTypeAlgoKitTransactError.lift) {
    uniffi_algokit_transact_ffi_fn_func_get_encoded_transaction_type(
        FfiConverterData.lower(bytes),$0
    )
})
}
/**
 * Get the base32 transaction ID string for a transaction.
 */
public func getTransactionId(tx: Transaction)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeAlgoKitTransactError.lift) {
    uniffi_algokit_transact_ffi_fn_func_get_transaction_id(
        FfiConverterTypeTransaction.lower(tx),$0
    )
})
}
/**
 * Get the raw 32-byte transaction ID for a transaction.
 */
public func getTransactionRawId(tx: Transaction)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeAlgoKitTransactError.lift) {
    uniffi_algokit_transact_ffi_fn_func_get_transaction_raw_id(
        FfiConverterTypeTransaction.lower(tx),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_algokit_transact_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_algokit_transact_ffi_checksum_func_address_from_pub_key() != 65205) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_algokit_transact_ffi_checksum_func_address_from_string() != 56499) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_algokit_transact_ffi_checksum_func_attach_signature() != 7369) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_algokit_transact_ffi_checksum_func_decode_transaction() != 38127) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_algokit_transact_ffi_checksum_func_encode_transaction() != 62809) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_algokit_transact_ffi_checksum_func_encode_transaction_raw() != 1774) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_algokit_transact_ffi_checksum_func_get_encoded_transaction_type() != 9866) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_algokit_transact_ffi_checksum_func_get_transaction_id() != 20463) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_algokit_transact_ffi_checksum_func_get_transaction_raw_id() != 15873) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all