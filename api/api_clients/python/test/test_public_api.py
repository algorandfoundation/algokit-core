# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pytest
import os
import base64
from typing import Dict, Any

from algorand_algod_client.api.public_api import PublicApi
from algorand_algod_client.models import *
from algorand_algod_client.configuration import Configuration
from algorand_algod_client.api_client import ApiClient
from algorand_algod_client.exceptions import ApiException
from test.test_utils import TestDataGenerator
from algokit_transact import (
    TransactionHeader,
    encode_transaction,
    PayTransactionFields,
    TransactionType,
    attach_signature,
    decode_transaction,
    get_encoded_transaction_type,
    Transaction,
    address_from_string,
    address_from_pub_key,
)
from nacl.signing import SigningKey

@pytest.fixture
def api_client_fixture():
    """Fixture to create a configured API client for testing."""
    # Configuration for local Algorand node
    configuration = Configuration(
        host="http://localhost:4001",
        api_key={
            'api_key': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
        }
    )
    
    # Create API client with the configuration
    client = ApiClient(configuration)
    yield client
    # No cleanup needed for non-async client
    pass


class TestPublicApi:
    """PublicApi test cases"""

    def test_raw_transaction(self, api_client_fixture, dummy_data) -> None:
        """Test case for raw_transaction

        Broadcasts a raw transaction or transaction group to the network.
        """
        try:
            # Create an instance of the API class using the api_client fixture
            api_instance = PublicApi(api_client_fixture)
         
            # Set Accept header
            headers = {
                'Accept': 'application/json'
            }

            alice_keypair = SigningKey.generate()  # Keypair generated from PyNaCl
            alice = address_from_pub_key(alice_keypair.verify_key.__bytes__())
            bob = address_from_string(
                "B72WNFFEZ7EOGMQPP7ROHYS3DSLL5JW74QASYNWGZGQXWRPJECJJLJIJ2Y"
            )

            params = api_instance.transaction_params(_headers=headers)
            print(params)

            txn = Transaction(
                header=TransactionHeader(
                    transaction_type=TransactionType.PAYMENT,
                    fee=params.min_fee,
                    first_valid=params.last_round,
                    last_valid=params.last_round + 1000,
                    sender=alice,
                    genesis_hash=base64.b64decode(params.genesis_hash),  # pretend this is a valid hash
                    genesis_id=params.genesis_id,
                ),
                pay_fields=PayTransactionFields(amount=int(1e6), receiver=bob),
            )

            sig = alice_keypair.sign(encode_transaction(txn)).signature
            signed_txn = attach_signature(encode_transaction(txn), sig)
                    
            # Call API and validate response
            response = api_instance.raw_transaction(
                rawtxn=signed_txn, 
                _headers=headers
            )
            assert response is not None
            
            # Perform additional assertions on the response
            # Assert on complex return type
            assert hasattr(response, 'to_dict')
            response_dict = response.to_dict()
            assert isinstance(response_dict, dict)
            
        except ApiException as e:
            if e.status == 401:
                pytest.skip(f"Authentication required or failed: {e}")
            elif e.status == 404:
                pytest.skip(f"Endpoint not available or resource not found: {e}")
            elif e.status == 501:
                pytest.skip(f"API not implemented: {e}")
            else:
                pytest.fail(f"API Exception: {e}")
        except Exception as e:
            pytest.fail(f"Exception when calling PublicApi->raw_transaction: {e}")

    def test_transaction_params(self, api_client_fixture, dummy_data) -> None:
        """Test case for transaction_params

        Get parameters for constructing a new transaction
        """
        try:
            # Create an instance of the API class using the api_client fixture
            api_instance = PublicApi(api_client_fixture)
            
            # Test for Get parameters for constructing a new transaction

            # Set Accept header
            headers = {
                'Accept': 'application/json'
            }
            
            # Call API and validate response
            response = api_instance.transaction_params(_headers=headers)
            assert response is not None
            
            # Perform additional assertions on the response
            # Assert on complex return type
            assert hasattr(response, 'to_dict')
            response_dict = response.to_dict()
            assert isinstance(response_dict, dict)
            
        except ApiException as e:
            if e.status == 401:
                pytest.skip(f"Authentication required or failed: {e}")
            elif e.status == 404:
                pytest.skip(f"Endpoint not available or resource not found: {e}")
            elif e.status == 501:
                pytest.skip(f"API not implemented: {e}")
            else:
                pytest.fail(f"API Exception: {e}")
        except Exception as e:
            pytest.fail(f"Exception when calling PublicApi->transaction_params: {e}")

