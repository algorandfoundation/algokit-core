# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pytest
import json
from pydantic import ValidationError

from algorand_algod_client.models.error_response import ErrorResponse

@pytest.fixture
def _data_minimal():
    """Fixture providing minimal data for ErrorResponse."""
    return {
        "message": ''
    }

@pytest.fixture
def _data_full():
    """Fixture providing complete data for ErrorResponse."""
    return {
        "message": ''
    }

class TestErrorResponse:
    """ErrorResponse test cases"""

    def test_ErrorResponse_create_minimal(self, _data_minimal):
        """Test ErrorResponse creation with minimal data."""
        instance = ErrorResponse(**_data_minimal)
        assert hasattr(instance, "message")
        
    def test_ErrorResponse_create_full(self, _data_full):
        """Test ErrorResponse creation with all fields."""
        instance = ErrorResponse(**_data_full)
        assert hasattr(instance, "message")
        
    def test_ErrorResponse_to_dict(self, _data_full):
        """Test ErrorResponse serialization to dict."""
        instance = ErrorResponse(**_data_full)
        result = instance.to_dict()
        # Check that to_dict returns a dictionary
        assert isinstance(result, dict)
        # Check all fields are present in the serialized result
        # Only check defined values - None values might be excluded
        if _data_full.get("message") is not None:
            assert "message" in result
        
    def test_ErrorResponse_to_str(self, _data_full):
        """Test ErrorResponse string representation is JSON-compatible."""
        instance = ErrorResponse(**_data_full)
        string_repr = instance.to_json()
        # Verify the string representation can be parsed as JSON
        try:
            json.loads(string_repr)
            json_valid = True
        except:
            json_valid = False
        assert json_valid, "String representation should be valid JSON"
