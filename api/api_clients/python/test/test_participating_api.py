# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pytest
import os
import base64
from typing import Dict, Any

from algorand_algod_client.api.participating_api import ParticipatingApi
from algorand_algod_client.models import *
from algorand_algod_client.configuration import Configuration
from algorand_algod_client.api_client import ApiClient
from algorand_algod_client.exceptions import ApiException
from test.test_utils import TestDataGenerator


@pytest.fixture
def api_client_fixture():
    """Fixture to create a configured API client for testing."""
    # Configuration for local Algorand node
    configuration = Configuration(
        host="http://localhost:4001",
        api_key={
            'api_key': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
        }
    )
    
    # Create API client with the configuration
    client = ApiClient(configuration)
    yield client
    # No cleanup needed for non-async client
    pass


class TestParticipatingApi:
    """ParticipatingApi test cases"""

    def test_raw_transaction(self, api_client_fixture, dummy_data) -> None:
        """Test case for raw_transaction

        Broadcasts a raw transaction or transaction group to the network.
        """
        try:
            # Create an instance of the API class using the api_client fixture
            api_instance = ParticipatingApi(api_client_fixture)
            
            # Test for Broadcasts a raw transaction or transaction group to the network.
            # Generate test data for rawtxn
            rawtxn = TestDataGenerator.random_bytes()  # Generate random file content

            # Set Accept header
            headers = {
                'Accept': 'application/json'
            }
            
            # Call API and validate response
            response = api_instance.raw_transaction(
                rawtxn=rawtxn, 
                _headers=headers
            )
            assert response is not None
            
            # Perform additional assertions on the response
            # Assert on complex return type
            assert hasattr(response, 'to_dict')
            response_dict = response.to_dict()
            assert isinstance(response_dict, dict)
            
        except ApiException as e:
            if e.status == 401:
                pytest.skip(f"Authentication required or failed: {e}")
            elif e.status == 404:
                pytest.skip(f"Endpoint not available or resource not found: {e}")
            elif e.status == 501:
                pytest.skip(f"API not implemented: {e}")
            else:
                pytest.fail(f"API Exception: {e}")
        except Exception as e:
            pytest.fail(f"Exception when calling ParticipatingApi->raw_transaction: {e}")

