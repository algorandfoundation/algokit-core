# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pytest
import json
from pydantic import ValidationError

from algorand_algod_client.models.transaction_params200_response import TransactionParams200Response

@pytest.fixture
def _data_minimal():
    """Fixture providing minimal data for TransactionParams200Response."""
    return {
        "consensus-version": '',
        "fee": 56,
        "genesis-hash": 'YQ==',
        "genesis-id": '',
        "last-round": 56,
        "min-fee": 56
    }

@pytest.fixture
def _data_full():
    """Fixture providing complete data for TransactionParams200Response."""
    return {
        "consensus-version": '',
        "fee": 56,
        "genesis-hash": 'YQ==',
        "genesis-id": '',
        "last-round": 56,
        "min-fee": 56
    }

class TestTransactionParams200Response:
    """TransactionParams200Response test cases"""

    def test_TransactionParams200Response_create_minimal(self, _data_minimal):
        """Test TransactionParams200Response creation with minimal data."""
        instance = TransactionParams200Response(**_data_minimal)
        assert hasattr(instance, "consensus_version")
        assert hasattr(instance, "fee")
        assert hasattr(instance, "genesis_hash")
        assert hasattr(instance, "genesis_id")
        assert hasattr(instance, "last_round")
        assert hasattr(instance, "min_fee")
        
    def test_TransactionParams200Response_create_full(self, _data_full):
        """Test TransactionParams200Response creation with all fields."""
        instance = TransactionParams200Response(**_data_full)
        assert hasattr(instance, "consensus_version")
        assert hasattr(instance, "fee")
        assert hasattr(instance, "genesis_hash")
        assert hasattr(instance, "genesis_id")
        assert hasattr(instance, "last_round")
        assert hasattr(instance, "min_fee")
        
    def test_TransactionParams200Response_to_dict(self, _data_full):
        """Test TransactionParams200Response serialization to dict."""
        instance = TransactionParams200Response(**_data_full)
        result = instance.to_dict()
        # Check that to_dict returns a dictionary
        assert isinstance(result, dict)
        # Check all fields are present in the serialized result
        # Only check defined values - None values might be excluded
        if _data_full.get("consensus-version") is not None:
            assert "consensus-version" in result
        # Only check defined values - None values might be excluded
        if _data_full.get("fee") is not None:
            assert "fee" in result
        # Only check defined values - None values might be excluded
        if _data_full.get("genesis-hash") is not None:
            assert "genesis-hash" in result
        # Only check defined values - None values might be excluded
        if _data_full.get("genesis-id") is not None:
            assert "genesis-id" in result
        # Only check defined values - None values might be excluded
        if _data_full.get("last-round") is not None:
            assert "last-round" in result
        # Only check defined values - None values might be excluded
        if _data_full.get("min-fee") is not None:
            assert "min-fee" in result
        
    def test_TransactionParams200Response_to_str(self, _data_full):
        """Test TransactionParams200Response string representation is JSON-compatible."""
        instance = TransactionParams200Response(**_data_full)
        string_repr = instance.to_json()
        # Verify the string representation can be parsed as JSON
        try:
            json.loads(string_repr)
            json_valid = True
        except:
            json_valid = False
        assert json_valid, "String representation should be valid JSON"
