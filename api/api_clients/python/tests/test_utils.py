# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import random
import string
import base64
from typing import Dict, Any, List
import json
import os

from algorand_algod_client.api.algod_api import AlgodApi
from algokit_transact import (
    TransactionHeader,
    encode_transaction,
    PayTransactionFields,
    TransactionType,
    attach_signature,
    Transaction,
    address_from_string,
    address_from_pub_key,
)
from nacl.signing import SigningKey


class TestDataGenerator:
    """Helper class for generating test data for API tests."""

    @staticmethod
    def random_string(length: int = 10) -> str:
        """Generate a random string of fixed length."""
        letters = string.ascii_lowercase
        return ''.join(random.choice(letters) for _ in range(length))

    @staticmethod
    def random_int(min_val: int = 0, max_val: int = 1000) -> int:
        """Generate a random integer between min_val and max_val."""
        return random.randint(min_val, max_val)

    @staticmethod
    def random_bytes(length: int = 32) -> bytes:
        """Generate random bytes of given length."""
        return bytes(random.getrandbits(8) for _ in range(length))

    @staticmethod
    def random_base64(length: int = 32) -> str:
        """Generate a random base64 string derived from random bytes."""
        random_bytes = TestDataGenerator.random_bytes(length)
        return base64.b64encode(random_bytes).decode('utf-8')

    @staticmethod
    def random_address() -> str:
        """Generate a random Algorand address-like string."""
        # Algorand addresses are 58 characters
        return TestDataGenerator.random_base64(32)

    @staticmethod
    def random_transaction_id() -> str:
        """Generate a random transaction ID-like string."""
        # Transaction IDs are 52 characters
        return TestDataGenerator.random_base64(26)

    @staticmethod
    def random_signed_txn(api_instance: AlgodApi, headers: Dict[str, str] | None = None) -> bytes:
        """Generate a random signed transaction."""
        alice_keypair = SigningKey(seed=base64.b64decode(os.environ["TEST_WALLET_PKEY"]))
        alice = address_from_pub_key(alice_keypair.verify_key.__bytes__())
        bob = address_from_string(
            "B72WNFFEZ7EOGMQPP7ROHYS3DSLL5JW74QASYNWGZGQXWRPJECJJLJIJ2Y"
        )

        params = api_instance.transaction_params(_headers=headers)
        print(params)

        txn = Transaction(
            header=TransactionHeader(
                transaction_type=TransactionType.PAYMENT,
                fee=params.min_fee,
                first_valid=params.last_round,
                last_valid=params.last_round + 1000,
                sender=alice,
                genesis_hash=base64.b64decode(params.genesis_hash),  # pretend this is a valid hash
                genesis_id=params.genesis_id,
            ),
            pay_fields=PayTransactionFields(amount=int(1e6), receiver=bob),
        )

        sig = alice_keypair.sign(encode_transaction(txn)).signature
        signed_txn = attach_signature(encode_transaction(txn), sig)
        return signed_txn

    @staticmethod
    def random_dict(keys: List[str], min_val: int = 0, max_val: int = 100) -> Dict[str, int]:
        """Generate a random dictionary with the specified keys."""
        return {key: TestDataGenerator.random_int(min_val, max_val) for key in keys}

    @staticmethod
    def load_dummy_data(filename: str) -> Dict[str, Any]:
        """Load dummy data from a JSON file in the test/data directory."""
        with open(f"test/data/{filename}.json", "r") as f:
            return json.load(f) 
