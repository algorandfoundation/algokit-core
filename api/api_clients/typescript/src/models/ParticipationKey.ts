/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccountParticipation } from './AccountParticipation';
import {
    AccountParticipationFromJSON,
    AccountParticipationFromJSONTyped,
    AccountParticipationToJSON,
    AccountParticipationToJSONTyped,
} from './AccountParticipation';

/**
 * Represents a participation key used by the node.
 * @export
 * @interface ParticipationKey
 */
export interface ParticipationKey {
    /**
     * The key's ParticipationID.
     * @type {string}
     * @memberof ParticipationKey
     */
    id: string;
    /**
     * Address the key was generated for.
     * @type {string}
     * @memberof ParticipationKey
     */
    address: string;
    /**
     * When registered, this is the first round it may be used.
     * @type {number}
     * @memberof ParticipationKey
     */
    effectiveFirstValid?: number;
    /**
     * When registered, this is the last round it may be used.
     * @type {number}
     * @memberof ParticipationKey
     */
    effectiveLastValid?: number;
    /**
     * Round when this key was last used to vote.
     * @type {number}
     * @memberof ParticipationKey
     */
    lastVote?: number;
    /**
     * Round when this key was last used to propose a block.
     * @type {number}
     * @memberof ParticipationKey
     */
    lastBlockProposal?: number;
    /**
     * Round when this key was last used to generate a state proof.
     * @type {number}
     * @memberof ParticipationKey
     */
    lastStateProof?: number;
    /**
     * 
     * @type {AccountParticipation}
     * @memberof ParticipationKey
     */
    key: AccountParticipation;
}

/**
 * Check if a given object implements the ParticipationKey interface.
 */
export function instanceOfParticipationKey(value: object): value is ParticipationKey {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('key' in value) || value['key'] === undefined) return false;
    return true;
}

export function ParticipationKeyFromJSON(json: any): ParticipationKey {
    return ParticipationKeyFromJSONTyped(json, false);
}

export function ParticipationKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParticipationKey {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'address': json['address'],
        'effectiveFirstValid': json['effective-first-valid'] == null ? undefined : json['effective-first-valid'],
        'effectiveLastValid': json['effective-last-valid'] == null ? undefined : json['effective-last-valid'],
        'lastVote': json['last-vote'] == null ? undefined : json['last-vote'],
        'lastBlockProposal': json['last-block-proposal'] == null ? undefined : json['last-block-proposal'],
        'lastStateProof': json['last-state-proof'] == null ? undefined : json['last-state-proof'],
        'key': AccountParticipationFromJSON(json['key']),
    };
}

export function ParticipationKeyToJSON(json: any): ParticipationKey {
    return ParticipationKeyToJSONTyped(json, false);
}

export function ParticipationKeyToJSONTyped(value?: ParticipationKey | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'address': value['address'],
        'effective-first-valid': value['effectiveFirstValid'],
        'effective-last-valid': value['effectiveLastValid'],
        'last-vote': value['lastVote'],
        'last-block-proposal': value['lastBlockProposal'],
        'last-state-proof': value['lastStateProof'],
        'key': AccountParticipationToJSON(value['key']),
    };
}

