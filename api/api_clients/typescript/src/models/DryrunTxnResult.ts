/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccountStateDelta } from './AccountStateDelta';
import {
    AccountStateDeltaFromJSON,
    AccountStateDeltaFromJSONTyped,
    AccountStateDeltaToJSON,
    AccountStateDeltaToJSONTyped,
} from './AccountStateDelta';
import type { EvalDeltaKeyValue } from './EvalDeltaKeyValue';
import {
    EvalDeltaKeyValueFromJSON,
    EvalDeltaKeyValueFromJSONTyped,
    EvalDeltaKeyValueToJSON,
    EvalDeltaKeyValueToJSONTyped,
} from './EvalDeltaKeyValue';
import type { DryrunState } from './DryrunState';
import {
    DryrunStateFromJSON,
    DryrunStateFromJSONTyped,
    DryrunStateToJSON,
    DryrunStateToJSONTyped,
} from './DryrunState';

/**
 * DryrunTxnResult contains any LogicSig or ApplicationCall program debug information and state updates from a dryrun.
 * @export
 * @interface DryrunTxnResult
 */
export interface DryrunTxnResult {
    /**
     * Disassembled program line by line.
     * @type {Array<string>}
     * @memberof DryrunTxnResult
     */
    disassembly: Array<string>;
    /**
     * Disassembled lsig program line by line.
     * @type {Array<string>}
     * @memberof DryrunTxnResult
     */
    logicSigDisassembly?: Array<string>;
    /**
     * 
     * @type {Array<DryrunState>}
     * @memberof DryrunTxnResult
     */
    logicSigTrace?: Array<DryrunState>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DryrunTxnResult
     */
    logicSigMessages?: Array<string>;
    /**
     * 
     * @type {Array<DryrunState>}
     * @memberof DryrunTxnResult
     */
    appCallTrace?: Array<DryrunState>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DryrunTxnResult
     */
    appCallMessages?: Array<string>;
    /**
     * Application state delta.
     * @type {Array<EvalDeltaKeyValue>}
     * @memberof DryrunTxnResult
     */
    globalDelta?: Array<EvalDeltaKeyValue>;
    /**
     * 
     * @type {Array<AccountStateDelta>}
     * @memberof DryrunTxnResult
     */
    localDeltas?: Array<AccountStateDelta>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DryrunTxnResult
     */
    logs?: Array<string>;
    /**
     * Budget added during execution of app call transaction.
     * @type {number}
     * @memberof DryrunTxnResult
     */
    budgetAdded?: number;
    /**
     * Budget consumed during execution of app call transaction.
     * @type {number}
     * @memberof DryrunTxnResult
     */
    budgetConsumed?: number;
}

/**
 * Check if a given object implements the DryrunTxnResult interface.
 */
export function instanceOfDryrunTxnResult(value: object): value is DryrunTxnResult {
    if (!('disassembly' in value) || value['disassembly'] === undefined) return false;
    return true;
}

export function DryrunTxnResultFromJSON(json: any): DryrunTxnResult {
    return DryrunTxnResultFromJSONTyped(json, false);
}

export function DryrunTxnResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): DryrunTxnResult {
    if (json == null) {
        return json;
    }
    return {
        
        'disassembly': json['disassembly'],
        'logicSigDisassembly': json['logic-sig-disassembly'] == null ? undefined : json['logic-sig-disassembly'],
        'logicSigTrace': json['logic-sig-trace'] == null ? undefined : ((json['logic-sig-trace'] as Array<any>).map(DryrunStateFromJSON)),
        'logicSigMessages': json['logic-sig-messages'] == null ? undefined : json['logic-sig-messages'],
        'appCallTrace': json['app-call-trace'] == null ? undefined : ((json['app-call-trace'] as Array<any>).map(DryrunStateFromJSON)),
        'appCallMessages': json['app-call-messages'] == null ? undefined : json['app-call-messages'],
        'globalDelta': json['global-delta'] == null ? undefined : ((json['global-delta'] as Array<any>).map(EvalDeltaKeyValueFromJSON)),
        'localDeltas': json['local-deltas'] == null ? undefined : ((json['local-deltas'] as Array<any>).map(AccountStateDeltaFromJSON)),
        'logs': json['logs'] == null ? undefined : json['logs'],
        'budgetAdded': json['budget-added'] == null ? undefined : json['budget-added'],
        'budgetConsumed': json['budget-consumed'] == null ? undefined : json['budget-consumed'],
    };
}

export function DryrunTxnResultToJSON(json: any): DryrunTxnResult {
    return DryrunTxnResultToJSONTyped(json, false);
}

export function DryrunTxnResultToJSONTyped(value?: DryrunTxnResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'disassembly': value['disassembly'],
        'logic-sig-disassembly': value['logicSigDisassembly'],
        'logic-sig-trace': value['logicSigTrace'] == null ? undefined : ((value['logicSigTrace'] as Array<any>).map(DryrunStateToJSON)),
        'logic-sig-messages': value['logicSigMessages'],
        'app-call-trace': value['appCallTrace'] == null ? undefined : ((value['appCallTrace'] as Array<any>).map(DryrunStateToJSON)),
        'app-call-messages': value['appCallMessages'],
        'global-delta': value['globalDelta'] == null ? undefined : ((value['globalDelta'] as Array<any>).map(EvalDeltaKeyValueToJSON)),
        'local-deltas': value['localDeltas'] == null ? undefined : ((value['localDeltas'] as Array<any>).map(AccountStateDeltaToJSON)),
        'logs': value['logs'],
        'budget-added': value['budgetAdded'],
        'budget-consumed': value['budgetConsumed'],
    };
}

