/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Box } from './Box';
import {
    BoxFromJSON,
    BoxFromJSONTyped,
    BoxToJSON,
    BoxToJSONTyped,
} from './Box';

/**
 * 
 * @export
 * @interface GetApplicationBoxes200Response
 */
export interface GetApplicationBoxes200Response {
    /**
     * The round for which this information is relevant.
     * @type {number}
     * @memberof GetApplicationBoxes200Response
     */
    round: number;
    /**
     * Used for pagination, when making another request provide this token with the next parameter.
     * @type {string}
     * @memberof GetApplicationBoxes200Response
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<Box>}
     * @memberof GetApplicationBoxes200Response
     */
    boxes: Array<Box>;
}

/**
 * Check if a given object implements the GetApplicationBoxes200Response interface.
 */
export function instanceOfGetApplicationBoxes200Response(value: object): value is GetApplicationBoxes200Response {
    if (!('round' in value) || value['round'] === undefined) return false;
    if (!('boxes' in value) || value['boxes'] === undefined) return false;
    return true;
}

export function GetApplicationBoxes200ResponseFromJSON(json: any): GetApplicationBoxes200Response {
    return GetApplicationBoxes200ResponseFromJSONTyped(json, false);
}

export function GetApplicationBoxes200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetApplicationBoxes200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'round': json['round'],
        'nextToken': json['next-token'] == null ? undefined : json['next-token'],
        'boxes': ((json['boxes'] as Array<any>).map(BoxFromJSON)),
    };
}

export function GetApplicationBoxes200ResponseToJSON(json: any): GetApplicationBoxes200Response {
    return GetApplicationBoxes200ResponseToJSONTyped(json, false);
}

export function GetApplicationBoxes200ResponseToJSONTyped(value?: GetApplicationBoxes200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'round': value['round'],
        'next-token': value['nextToken'],
        'boxes': ((value['boxes'] as Array<any>).map(BoxToJSON)),
    };
}

