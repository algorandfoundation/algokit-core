/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Account } from './Account';
import {
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
    AccountToJSONTyped,
} from './Account';
import type { DryrunSource } from './DryrunSource';
import {
    DryrunSourceFromJSON,
    DryrunSourceFromJSONTyped,
    DryrunSourceToJSON,
    DryrunSourceToJSONTyped,
} from './DryrunSource';
import type { Application } from './Application';
import {
    ApplicationFromJSON,
    ApplicationFromJSONTyped,
    ApplicationToJSON,
    ApplicationToJSONTyped,
} from './Application';

/**
 * Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information.
 * @export
 * @interface DryrunRequest
 */
export interface DryrunRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof DryrunRequest
     */
    txns: Array<string>;
    /**
     * 
     * @type {Array<Account>}
     * @memberof DryrunRequest
     */
    accounts: Array<Account>;
    /**
     * 
     * @type {Array<Application>}
     * @memberof DryrunRequest
     */
    apps: Array<Application>;
    /**
     * ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.
     * @type {string}
     * @memberof DryrunRequest
     */
    protocolVersion: string;
    /**
     * Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.
     * @type {number}
     * @memberof DryrunRequest
     */
    round: number;
    /**
     * LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.
     * @type {number}
     * @memberof DryrunRequest
     */
    latestTimestamp: number;
    /**
     * 
     * @type {Array<DryrunSource>}
     * @memberof DryrunRequest
     */
    sources: Array<DryrunSource>;
}

/**
 * Check if a given object implements the DryrunRequest interface.
 */
export function instanceOfDryrunRequest(value: object): value is DryrunRequest {
    if (!('txns' in value) || value['txns'] === undefined) return false;
    if (!('accounts' in value) || value['accounts'] === undefined) return false;
    if (!('apps' in value) || value['apps'] === undefined) return false;
    if (!('protocolVersion' in value) || value['protocolVersion'] === undefined) return false;
    if (!('round' in value) || value['round'] === undefined) return false;
    if (!('latestTimestamp' in value) || value['latestTimestamp'] === undefined) return false;
    if (!('sources' in value) || value['sources'] === undefined) return false;
    return true;
}

export function DryrunRequestFromJSON(json: any): DryrunRequest {
    return DryrunRequestFromJSONTyped(json, false);
}

export function DryrunRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DryrunRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'txns': json['txns'],
        'accounts': ((json['accounts'] as Array<any>).map(AccountFromJSON)),
        'apps': ((json['apps'] as Array<any>).map(ApplicationFromJSON)),
        'protocolVersion': json['protocol-version'],
        'round': json['round'],
        'latestTimestamp': json['latest-timestamp'],
        'sources': ((json['sources'] as Array<any>).map(DryrunSourceFromJSON)),
    };
}

export function DryrunRequestToJSON(json: any): DryrunRequest {
    return DryrunRequestToJSONTyped(json, false);
}

export function DryrunRequestToJSONTyped(value?: DryrunRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'txns': value['txns'],
        'accounts': ((value['accounts'] as Array<any>).map(AccountToJSON)),
        'apps': ((value['apps'] as Array<any>).map(ApplicationToJSON)),
        'protocol-version': value['protocolVersion'],
        'round': value['round'],
        'latest-timestamp': value['latestTimestamp'],
        'sources': ((value['sources'] as Array<any>).map(DryrunSourceToJSON)),
    };
}

