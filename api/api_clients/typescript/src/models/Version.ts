/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BuildVersion } from './BuildVersion';
import {
    BuildVersionFromJSON,
    BuildVersionFromJSONTyped,
    BuildVersionToJSON,
    BuildVersionToJSONTyped,
} from './BuildVersion';

/**
 * algod version information.
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * 
     * @type {BuildVersion}
     * @memberof Version
     */
    build: BuildVersion;
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    genesisHashB64: string;
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    genesisId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Version
     */
    versions: Array<string>;
}

/**
 * Check if a given object implements the Version interface.
 */
export function instanceOfVersion(value: object): value is Version {
    if (!('build' in value) || value['build'] === undefined) return false;
    if (!('genesisHashB64' in value) || value['genesisHashB64'] === undefined) return false;
    if (!('genesisId' in value) || value['genesisId'] === undefined) return false;
    if (!('versions' in value) || value['versions'] === undefined) return false;
    return true;
}

export function VersionFromJSON(json: any): Version {
    return VersionFromJSONTyped(json, false);
}

export function VersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Version {
    if (json == null) {
        return json;
    }
    return {
        
        'build': BuildVersionFromJSON(json['build']),
        'genesisHashB64': json['genesis_hash_b64'],
        'genesisId': json['genesis_id'],
        'versions': json['versions'],
    };
}

export function VersionToJSON(json: any): Version {
    return VersionToJSONTyped(json, false);
}

export function VersionToJSONTyped(value?: Version | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'build': BuildVersionToJSON(value['build']),
        'genesis_hash_b64': value['genesisHashB64'],
        'genesis_id': value['genesisId'],
        'versions': value['versions'],
    };
}

