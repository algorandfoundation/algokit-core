/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * NodeStatus contains the information about a node status
 * @export
 * @interface GetStatus200Response
 */
export interface GetStatus200Response {
    /**
     * CatchupTime in nanoseconds
     * @type {number}
     * @memberof GetStatus200Response
     */
    catchupTime: number;
    /**
     * LastRound indicates the last round seen
     * @type {number}
     * @memberof GetStatus200Response
     */
    lastRound: number;
    /**
     * LastVersion indicates the last consensus version supported
     * @type {string}
     * @memberof GetStatus200Response
     */
    lastVersion: string;
    /**
     * NextVersion of consensus protocol to use
     * @type {string}
     * @memberof GetStatus200Response
     */
    nextVersion: string;
    /**
     * NextVersionRound is the round at which the next consensus version will apply
     * @type {number}
     * @memberof GetStatus200Response
     */
    nextVersionRound: number;
    /**
     * NextVersionSupported indicates whether the next consensus version is supported by this node
     * @type {boolean}
     * @memberof GetStatus200Response
     */
    nextVersionSupported: boolean;
    /**
     * StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
     * @type {boolean}
     * @memberof GetStatus200Response
     */
    stoppedAtUnsupportedRound: boolean;
    /**
     * TimeSinceLastRound in nanoseconds
     * @type {number}
     * @memberof GetStatus200Response
     */
    timeSinceLastRound: number;
    /**
     * The last catchpoint seen by the node
     * @type {string}
     * @memberof GetStatus200Response
     */
    lastCatchpoint?: string;
    /**
     * The current catchpoint that is being caught up to
     * @type {string}
     * @memberof GetStatus200Response
     */
    catchpoint?: string;
    /**
     * The total number of accounts included in the current catchpoint
     * @type {number}
     * @memberof GetStatus200Response
     */
    catchpointTotalAccounts?: number;
    /**
     * The number of accounts from the current catchpoint that have been processed so far as part of the catchup
     * @type {number}
     * @memberof GetStatus200Response
     */
    catchpointProcessedAccounts?: number;
    /**
     * The number of accounts from the current catchpoint that have been verified so far as part of the catchup
     * @type {number}
     * @memberof GetStatus200Response
     */
    catchpointVerifiedAccounts?: number;
    /**
     * The total number of key-values (KVs) included in the current catchpoint
     * @type {number}
     * @memberof GetStatus200Response
     */
    catchpointTotalKvs?: number;
    /**
     * The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
     * @type {number}
     * @memberof GetStatus200Response
     */
    catchpointProcessedKvs?: number;
    /**
     * The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
     * @type {number}
     * @memberof GetStatus200Response
     */
    catchpointVerifiedKvs?: number;
    /**
     * The total number of blocks that are required to complete the current catchpoint catchup
     * @type {number}
     * @memberof GetStatus200Response
     */
    catchpointTotalBlocks?: number;
    /**
     * The number of blocks that have already been obtained by the node as part of the catchup
     * @type {number}
     * @memberof GetStatus200Response
     */
    catchpointAcquiredBlocks?: number;
    /**
     * Upgrade delay
     * @type {number}
     * @memberof GetStatus200Response
     */
    upgradeDelay?: number;
    /**
     * This node's upgrade vote
     * @type {boolean}
     * @memberof GetStatus200Response
     */
    upgradeNodeVote?: boolean;
    /**
     * Yes votes required for consensus upgrade
     * @type {number}
     * @memberof GetStatus200Response
     */
    upgradeVotesRequired?: number;
    /**
     * Total votes cast for consensus upgrade
     * @type {number}
     * @memberof GetStatus200Response
     */
    upgradeVotes?: number;
    /**
     * Yes votes cast for consensus upgrade
     * @type {number}
     * @memberof GetStatus200Response
     */
    upgradeYesVotes?: number;
    /**
     * No votes cast for consensus upgrade
     * @type {number}
     * @memberof GetStatus200Response
     */
    upgradeNoVotes?: number;
    /**
     * Next protocol round
     * @type {number}
     * @memberof GetStatus200Response
     */
    upgradeNextProtocolVoteBefore?: number;
    /**
     * Total voting rounds for current upgrade
     * @type {number}
     * @memberof GetStatus200Response
     */
    upgradeVoteRounds?: number;
}

/**
 * Check if a given object implements the GetStatus200Response interface.
 */
export function instanceOfGetStatus200Response(value: object): value is GetStatus200Response {
    if (!('catchupTime' in value) || value['catchupTime'] === undefined) return false;
    if (!('lastRound' in value) || value['lastRound'] === undefined) return false;
    if (!('lastVersion' in value) || value['lastVersion'] === undefined) return false;
    if (!('nextVersion' in value) || value['nextVersion'] === undefined) return false;
    if (!('nextVersionRound' in value) || value['nextVersionRound'] === undefined) return false;
    if (!('nextVersionSupported' in value) || value['nextVersionSupported'] === undefined) return false;
    if (!('stoppedAtUnsupportedRound' in value) || value['stoppedAtUnsupportedRound'] === undefined) return false;
    if (!('timeSinceLastRound' in value) || value['timeSinceLastRound'] === undefined) return false;
    return true;
}

export function GetStatus200ResponseFromJSON(json: any): GetStatus200Response {
    return GetStatus200ResponseFromJSONTyped(json, false);
}

export function GetStatus200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetStatus200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'catchupTime': json['catchup-time'],
        'lastRound': json['last-round'],
        'lastVersion': json['last-version'],
        'nextVersion': json['next-version'],
        'nextVersionRound': json['next-version-round'],
        'nextVersionSupported': json['next-version-supported'],
        'stoppedAtUnsupportedRound': json['stopped-at-unsupported-round'],
        'timeSinceLastRound': json['time-since-last-round'],
        'lastCatchpoint': json['last-catchpoint'] == null ? undefined : json['last-catchpoint'],
        'catchpoint': json['catchpoint'] == null ? undefined : json['catchpoint'],
        'catchpointTotalAccounts': json['catchpoint-total-accounts'] == null ? undefined : json['catchpoint-total-accounts'],
        'catchpointProcessedAccounts': json['catchpoint-processed-accounts'] == null ? undefined : json['catchpoint-processed-accounts'],
        'catchpointVerifiedAccounts': json['catchpoint-verified-accounts'] == null ? undefined : json['catchpoint-verified-accounts'],
        'catchpointTotalKvs': json['catchpoint-total-kvs'] == null ? undefined : json['catchpoint-total-kvs'],
        'catchpointProcessedKvs': json['catchpoint-processed-kvs'] == null ? undefined : json['catchpoint-processed-kvs'],
        'catchpointVerifiedKvs': json['catchpoint-verified-kvs'] == null ? undefined : json['catchpoint-verified-kvs'],
        'catchpointTotalBlocks': json['catchpoint-total-blocks'] == null ? undefined : json['catchpoint-total-blocks'],
        'catchpointAcquiredBlocks': json['catchpoint-acquired-blocks'] == null ? undefined : json['catchpoint-acquired-blocks'],
        'upgradeDelay': json['upgrade-delay'] == null ? undefined : json['upgrade-delay'],
        'upgradeNodeVote': json['upgrade-node-vote'] == null ? undefined : json['upgrade-node-vote'],
        'upgradeVotesRequired': json['upgrade-votes-required'] == null ? undefined : json['upgrade-votes-required'],
        'upgradeVotes': json['upgrade-votes'] == null ? undefined : json['upgrade-votes'],
        'upgradeYesVotes': json['upgrade-yes-votes'] == null ? undefined : json['upgrade-yes-votes'],
        'upgradeNoVotes': json['upgrade-no-votes'] == null ? undefined : json['upgrade-no-votes'],
        'upgradeNextProtocolVoteBefore': json['upgrade-next-protocol-vote-before'] == null ? undefined : json['upgrade-next-protocol-vote-before'],
        'upgradeVoteRounds': json['upgrade-vote-rounds'] == null ? undefined : json['upgrade-vote-rounds'],
    };
}

export function GetStatus200ResponseToJSON(json: any): GetStatus200Response {
    return GetStatus200ResponseToJSONTyped(json, false);
}

export function GetStatus200ResponseToJSONTyped(value?: GetStatus200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'catchup-time': value['catchupTime'],
        'last-round': value['lastRound'],
        'last-version': value['lastVersion'],
        'next-version': value['nextVersion'],
        'next-version-round': value['nextVersionRound'],
        'next-version-supported': value['nextVersionSupported'],
        'stopped-at-unsupported-round': value['stoppedAtUnsupportedRound'],
        'time-since-last-round': value['timeSinceLastRound'],
        'last-catchpoint': value['lastCatchpoint'],
        'catchpoint': value['catchpoint'],
        'catchpoint-total-accounts': value['catchpointTotalAccounts'],
        'catchpoint-processed-accounts': value['catchpointProcessedAccounts'],
        'catchpoint-verified-accounts': value['catchpointVerifiedAccounts'],
        'catchpoint-total-kvs': value['catchpointTotalKvs'],
        'catchpoint-processed-kvs': value['catchpointProcessedKvs'],
        'catchpoint-verified-kvs': value['catchpointVerifiedKvs'],
        'catchpoint-total-blocks': value['catchpointTotalBlocks'],
        'catchpoint-acquired-blocks': value['catchpointAcquiredBlocks'],
        'upgrade-delay': value['upgradeDelay'],
        'upgrade-node-vote': value['upgradeNodeVote'],
        'upgrade-votes-required': value['upgradeVotesRequired'],
        'upgrade-votes': value['upgradeVotes'],
        'upgrade-yes-votes': value['upgradeYesVotes'],
        'upgrade-no-votes': value['upgradeNoVotes'],
        'upgrade-next-protocol-vote-before': value['upgradeNextProtocolVoteBefore'],
        'upgrade-vote-rounds': value['upgradeVoteRounds'],
    };
}

