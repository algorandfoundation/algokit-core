/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * TransactionParams contains the parameters that help a client construct
 * a new transaction.
 * @export
 * @interface TransactionParams200Response
 */
export interface TransactionParams200Response {
    /**
     * ConsensusVersion indicates the consensus protocol version
     * as of LastRound.
     * @type {string}
     * @memberof TransactionParams200Response
     */
    consensusVersion: string;
    /**
     * Fee is the suggested transaction fee
     * Fee is in units of micro-Algos per byte.
     * Fee may fall to zero but transactions must still have a fee of
     * at least MinTxnFee for the current network protocol.
     * @type {number}
     * @memberof TransactionParams200Response
     */
    fee: number;
    /**
     * GenesisHash is the hash of the genesis block.
     * @type {string}
     * @memberof TransactionParams200Response
     */
    genesisHash: string;
    /**
     * GenesisID is an ID listed in the genesis block.
     * @type {string}
     * @memberof TransactionParams200Response
     */
    genesisId: string;
    /**
     * LastRound indicates the last round seen
     * @type {number}
     * @memberof TransactionParams200Response
     */
    lastRound: number;
    /**
     * The minimum transaction fee (not per byte) required for the
     * txn to validate for the current network protocol.
     * @type {number}
     * @memberof TransactionParams200Response
     */
    minFee: number;
}

/**
 * Check if a given object implements the TransactionParams200Response interface.
 */
export function instanceOfTransactionParams200Response(value: object): value is TransactionParams200Response {
    if (!('consensusVersion' in value) || value['consensusVersion'] === undefined) return false;
    if (!('fee' in value) || value['fee'] === undefined) return false;
    if (!('genesisHash' in value) || value['genesisHash'] === undefined) return false;
    if (!('genesisId' in value) || value['genesisId'] === undefined) return false;
    if (!('lastRound' in value) || value['lastRound'] === undefined) return false;
    if (!('minFee' in value) || value['minFee'] === undefined) return false;
    return true;
}

export function TransactionParams200ResponseFromJSON(json: any): TransactionParams200Response {
    return TransactionParams200ResponseFromJSONTyped(json, false);
}

export function TransactionParams200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionParams200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'consensusVersion': json['consensus-version'],
        'fee': json['fee'],
        'genesisHash': json['genesis-hash'],
        'genesisId': json['genesis-id'],
        'lastRound': json['last-round'],
        'minFee': json['min-fee'],
    };
}

export function TransactionParams200ResponseToJSON(json: any): TransactionParams200Response {
    return TransactionParams200ResponseToJSONTyped(json, false);
}

export function TransactionParams200ResponseToJSONTyped(value?: TransactionParams200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'consensus-version': value['consensusVersion'],
        'fee': value['fee'],
        'genesis-hash': value['genesisHash'],
        'genesis-id': value['genesisId'],
        'last-round': value['lastRound'],
        'min-fee': value['minFee'],
    };
}

