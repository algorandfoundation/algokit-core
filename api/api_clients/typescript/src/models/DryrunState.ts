/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TealValue } from './TealValue';
import {
    TealValueFromJSON,
    TealValueFromJSONTyped,
    TealValueToJSON,
    TealValueToJSONTyped,
} from './TealValue';

/**
 * Stores the TEAL eval step data
 * @export
 * @interface DryrunState
 */
export interface DryrunState {
    /**
     * Line number
     * @type {number}
     * @memberof DryrunState
     */
    line: number;
    /**
     * Program counter
     * @type {number}
     * @memberof DryrunState
     */
    pc: number;
    /**
     * 
     * @type {Array<TealValue>}
     * @memberof DryrunState
     */
    stack: Array<TealValue>;
    /**
     * 
     * @type {Array<TealValue>}
     * @memberof DryrunState
     */
    scratch?: Array<TealValue>;
    /**
     * Evaluation error if any
     * @type {string}
     * @memberof DryrunState
     */
    error?: string;
}

/**
 * Check if a given object implements the DryrunState interface.
 */
export function instanceOfDryrunState(value: object): value is DryrunState {
    if (!('line' in value) || value['line'] === undefined) return false;
    if (!('pc' in value) || value['pc'] === undefined) return false;
    if (!('stack' in value) || value['stack'] === undefined) return false;
    return true;
}

export function DryrunStateFromJSON(json: any): DryrunState {
    return DryrunStateFromJSONTyped(json, false);
}

export function DryrunStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): DryrunState {
    if (json == null) {
        return json;
    }
    return {
        
        'line': json['line'],
        'pc': json['pc'],
        'stack': ((json['stack'] as Array<any>).map(TealValueFromJSON)),
        'scratch': json['scratch'] == null ? undefined : ((json['scratch'] as Array<any>).map(TealValueFromJSON)),
        'error': json['error'] == null ? undefined : json['error'],
    };
}

export function DryrunStateToJSON(json: any): DryrunState {
    return DryrunStateToJSONTyped(json, false);
}

export function DryrunStateToJSONTyped(value?: DryrunState | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'line': value['line'],
        'pc': value['pc'],
        'stack': ((value['stack'] as Array<any>).map(TealValueToJSON)),
        'scratch': value['scratch'] == null ? undefined : ((value['scratch'] as Array<any>).map(TealValueToJSON)),
        'error': value['error'],
    };
}

