/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents the message that the state proofs are attesting to.
 * @export
 * @interface StateProofMessage
 */
export interface StateProofMessage {
    /**
     * The vector commitment root on all light block headers within a state proof interval.
     * @type {string}
     * @memberof StateProofMessage
     */
    blockHeadersCommitment: string;
    /**
     * The vector commitment root of the top N accounts to sign the next StateProof.
     * @type {string}
     * @memberof StateProofMessage
     */
    votersCommitment: string;
    /**
     * An integer value representing the natural log of the proven weight with 16 bits of precision. This value would be used to verify the next state proof.
     * @type {number}
     * @memberof StateProofMessage
     */
    lnProvenWeight: number;
    /**
     * The first round the message attests to.
     * @type {number}
     * @memberof StateProofMessage
     */
    firstAttestedRound: number;
    /**
     * The last round the message attests to.
     * @type {number}
     * @memberof StateProofMessage
     */
    lastAttestedRound: number;
}

/**
 * Check if a given object implements the StateProofMessage interface.
 */
export function instanceOfStateProofMessage(value: object): value is StateProofMessage {
    if (!('blockHeadersCommitment' in value) || value['blockHeadersCommitment'] === undefined) return false;
    if (!('votersCommitment' in value) || value['votersCommitment'] === undefined) return false;
    if (!('lnProvenWeight' in value) || value['lnProvenWeight'] === undefined) return false;
    if (!('firstAttestedRound' in value) || value['firstAttestedRound'] === undefined) return false;
    if (!('lastAttestedRound' in value) || value['lastAttestedRound'] === undefined) return false;
    return true;
}

export function StateProofMessageFromJSON(json: any): StateProofMessage {
    return StateProofMessageFromJSONTyped(json, false);
}

export function StateProofMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): StateProofMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'blockHeadersCommitment': json['BlockHeadersCommitment'],
        'votersCommitment': json['VotersCommitment'],
        'lnProvenWeight': json['LnProvenWeight'],
        'firstAttestedRound': json['FirstAttestedRound'],
        'lastAttestedRound': json['LastAttestedRound'],
    };
}

export function StateProofMessageToJSON(json: any): StateProofMessage {
    return StateProofMessageToJSONTyped(json, false);
}

export function StateProofMessageToJSONTyped(value?: StateProofMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'BlockHeadersCommitment': value['blockHeadersCommitment'],
        'VotersCommitment': value['votersCommitment'],
        'LnProvenWeight': value['lnProvenWeight'],
        'FirstAttestedRound': value['firstAttestedRound'],
        'LastAttestedRound': value['lastAttestedRound'],
    };
}

