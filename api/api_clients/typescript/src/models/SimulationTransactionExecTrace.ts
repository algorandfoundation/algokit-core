/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SimulationOpcodeTraceUnit } from './SimulationOpcodeTraceUnit';
import {
    SimulationOpcodeTraceUnitFromJSON,
    SimulationOpcodeTraceUnitFromJSONTyped,
    SimulationOpcodeTraceUnitToJSON,
    SimulationOpcodeTraceUnitToJSONTyped,
} from './SimulationOpcodeTraceUnit';

/**
 * The execution trace of calling an app or a logic sig, containing the inner app call trace in a recursive way.
 * @export
 * @interface SimulationTransactionExecTrace
 */
export interface SimulationTransactionExecTrace {
    /**
     * Program trace that contains a trace of opcode effects in an approval program.
     * @type {Array<SimulationOpcodeTraceUnit>}
     * @memberof SimulationTransactionExecTrace
     */
    approvalProgramTrace?: Array<SimulationOpcodeTraceUnit>;
    /**
     * SHA512_256 hash digest of the approval program executed in transaction.
     * @type {string}
     * @memberof SimulationTransactionExecTrace
     */
    approvalProgramHash?: string;
    /**
     * Program trace that contains a trace of opcode effects in a clear state program.
     * @type {Array<SimulationOpcodeTraceUnit>}
     * @memberof SimulationTransactionExecTrace
     */
    clearStateProgramTrace?: Array<SimulationOpcodeTraceUnit>;
    /**
     * SHA512_256 hash digest of the clear state program executed in transaction.
     * @type {string}
     * @memberof SimulationTransactionExecTrace
     */
    clearStateProgramHash?: string;
    /**
     * If true, indicates that the clear state program failed and any persistent state changes it produced should be reverted once the program exits.
     * @type {boolean}
     * @memberof SimulationTransactionExecTrace
     */
    clearStateRollback?: boolean;
    /**
     * The error message explaining why the clear state program failed. This field will only be populated if clear-state-rollback is true and the failure was due to an execution error.
     * @type {string}
     * @memberof SimulationTransactionExecTrace
     */
    clearStateRollbackError?: string;
    /**
     * Program trace that contains a trace of opcode effects in a logic sig.
     * @type {Array<SimulationOpcodeTraceUnit>}
     * @memberof SimulationTransactionExecTrace
     */
    logicSigTrace?: Array<SimulationOpcodeTraceUnit>;
    /**
     * SHA512_256 hash digest of the logic sig executed in transaction.
     * @type {string}
     * @memberof SimulationTransactionExecTrace
     */
    logicSigHash?: string;
    /**
     * An array of SimulationTransactionExecTrace representing the execution trace of any inner transactions executed.
     * @type {Array<SimulationTransactionExecTrace>}
     * @memberof SimulationTransactionExecTrace
     */
    innerTrace?: Array<SimulationTransactionExecTrace>;
}

/**
 * Check if a given object implements the SimulationTransactionExecTrace interface.
 */
export function instanceOfSimulationTransactionExecTrace(value: object): value is SimulationTransactionExecTrace {
    return true;
}

export function SimulationTransactionExecTraceFromJSON(json: any): SimulationTransactionExecTrace {
    return SimulationTransactionExecTraceFromJSONTyped(json, false);
}

export function SimulationTransactionExecTraceFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimulationTransactionExecTrace {
    if (json == null) {
        return json;
    }
    return {
        
        'approvalProgramTrace': json['approval-program-trace'] == null ? undefined : ((json['approval-program-trace'] as Array<any>).map(SimulationOpcodeTraceUnitFromJSON)),
        'approvalProgramHash': json['approval-program-hash'] == null ? undefined : json['approval-program-hash'],
        'clearStateProgramTrace': json['clear-state-program-trace'] == null ? undefined : ((json['clear-state-program-trace'] as Array<any>).map(SimulationOpcodeTraceUnitFromJSON)),
        'clearStateProgramHash': json['clear-state-program-hash'] == null ? undefined : json['clear-state-program-hash'],
        'clearStateRollback': json['clear-state-rollback'] == null ? undefined : json['clear-state-rollback'],
        'clearStateRollbackError': json['clear-state-rollback-error'] == null ? undefined : json['clear-state-rollback-error'],
        'logicSigTrace': json['logic-sig-trace'] == null ? undefined : ((json['logic-sig-trace'] as Array<any>).map(SimulationOpcodeTraceUnitFromJSON)),
        'logicSigHash': json['logic-sig-hash'] == null ? undefined : json['logic-sig-hash'],
        'innerTrace': json['inner-trace'] == null ? undefined : ((json['inner-trace'] as Array<any>).map(SimulationTransactionExecTraceFromJSON)),
    };
}

export function SimulationTransactionExecTraceToJSON(json: any): SimulationTransactionExecTrace {
    return SimulationTransactionExecTraceToJSONTyped(json, false);
}

export function SimulationTransactionExecTraceToJSONTyped(value?: SimulationTransactionExecTrace | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'approval-program-trace': value['approvalProgramTrace'] == null ? undefined : ((value['approvalProgramTrace'] as Array<any>).map(SimulationOpcodeTraceUnitToJSON)),
        'approval-program-hash': value['approvalProgramHash'],
        'clear-state-program-trace': value['clearStateProgramTrace'] == null ? undefined : ((value['clearStateProgramTrace'] as Array<any>).map(SimulationOpcodeTraceUnitToJSON)),
        'clear-state-program-hash': value['clearStateProgramHash'],
        'clear-state-rollback': value['clearStateRollback'],
        'clear-state-rollback-error': value['clearStateRollbackError'],
        'logic-sig-trace': value['logicSigTrace'] == null ? undefined : ((value['logicSigTrace'] as Array<any>).map(SimulationOpcodeTraceUnitToJSON)),
        'logic-sig-hash': value['logicSigHash'],
        'inner-trace': value['innerTrace'] == null ? undefined : ((value['innerTrace'] as Array<any>).map(SimulationTransactionExecTraceToJSON)),
    };
}

