/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ApplicationStateSchema } from './ApplicationStateSchema';
import {
    ApplicationStateSchemaFromJSON,
    ApplicationStateSchemaFromJSONTyped,
    ApplicationStateSchemaToJSON,
    ApplicationStateSchemaToJSONTyped,
} from './ApplicationStateSchema';
import type { TealKeyValue } from './TealKeyValue';
import {
    TealKeyValueFromJSON,
    TealKeyValueFromJSONTyped,
    TealKeyValueToJSON,
    TealKeyValueToJSONTyped,
} from './TealKeyValue';

/**
 * Stores the global information associated with an application.
 * @export
 * @interface ApplicationParams
 */
export interface ApplicationParams {
    /**
     * The address that created this application. This is the address where the parameters and global state for this application can be found.
     * @type {string}
     * @memberof ApplicationParams
     */
    creator: string;
    /**
     * \[approv\] approval program.
     * @type {string}
     * @memberof ApplicationParams
     */
    approvalProgram: string;
    /**
     * \[clearp\] approval program.
     * @type {string}
     * @memberof ApplicationParams
     */
    clearStateProgram: string;
    /**
     * \[epp\] the amount of extra program pages available to this app.
     * @type {number}
     * @memberof ApplicationParams
     */
    extraProgramPages?: number;
    /**
     * 
     * @type {ApplicationStateSchema}
     * @memberof ApplicationParams
     */
    localStateSchema?: ApplicationStateSchema;
    /**
     * 
     * @type {ApplicationStateSchema}
     * @memberof ApplicationParams
     */
    globalStateSchema?: ApplicationStateSchema;
    /**
     * Represents a key-value store for use in an application.
     * @type {Array<TealKeyValue>}
     * @memberof ApplicationParams
     */
    globalState?: Array<TealKeyValue>;
}

/**
 * Check if a given object implements the ApplicationParams interface.
 */
export function instanceOfApplicationParams(value: object): value is ApplicationParams {
    if (!('creator' in value) || value['creator'] === undefined) return false;
    if (!('approvalProgram' in value) || value['approvalProgram'] === undefined) return false;
    if (!('clearStateProgram' in value) || value['clearStateProgram'] === undefined) return false;
    return true;
}

export function ApplicationParamsFromJSON(json: any): ApplicationParams {
    return ApplicationParamsFromJSONTyped(json, false);
}

export function ApplicationParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationParams {
    if (json == null) {
        return json;
    }
    return {
        
        'creator': json['creator'],
        'approvalProgram': json['approval-program'],
        'clearStateProgram': json['clear-state-program'],
        'extraProgramPages': json['extra-program-pages'] == null ? undefined : json['extra-program-pages'],
        'localStateSchema': json['local-state-schema'] == null ? undefined : ApplicationStateSchemaFromJSON(json['local-state-schema']),
        'globalStateSchema': json['global-state-schema'] == null ? undefined : ApplicationStateSchemaFromJSON(json['global-state-schema']),
        'globalState': json['global-state'] == null ? undefined : ((json['global-state'] as Array<any>).map(TealKeyValueFromJSON)),
    };
}

export function ApplicationParamsToJSON(json: any): ApplicationParams {
    return ApplicationParamsToJSONTyped(json, false);
}

export function ApplicationParamsToJSONTyped(value?: ApplicationParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'creator': value['creator'],
        'approval-program': value['approvalProgram'],
        'clear-state-program': value['clearStateProgram'],
        'extra-program-pages': value['extraProgramPages'],
        'local-state-schema': ApplicationStateSchemaToJSON(value['localStateSchema']),
        'global-state-schema': ApplicationStateSchemaToJSON(value['globalStateSchema']),
        'global-state': value['globalState'] == null ? undefined : ((value['globalState'] as Array<any>).map(TealKeyValueToJSON)),
    };
}

