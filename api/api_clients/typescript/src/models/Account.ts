/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ApplicationStateSchema } from './ApplicationStateSchema';
import {
    ApplicationStateSchemaFromJSON,
    ApplicationStateSchemaFromJSONTyped,
    ApplicationStateSchemaToJSON,
    ApplicationStateSchemaToJSONTyped,
} from './ApplicationStateSchema';
import type { Asset } from './Asset';
import {
    AssetFromJSON,
    AssetFromJSONTyped,
    AssetToJSON,
    AssetToJSONTyped,
} from './Asset';
import type { AccountParticipation } from './AccountParticipation';
import {
    AccountParticipationFromJSON,
    AccountParticipationFromJSONTyped,
    AccountParticipationToJSON,
    AccountParticipationToJSONTyped,
} from './AccountParticipation';
import type { AssetHolding } from './AssetHolding';
import {
    AssetHoldingFromJSON,
    AssetHoldingFromJSONTyped,
    AssetHoldingToJSON,
    AssetHoldingToJSONTyped,
} from './AssetHolding';
import type { Application } from './Application';
import {
    ApplicationFromJSON,
    ApplicationFromJSONTyped,
    ApplicationToJSON,
    ApplicationToJSONTyped,
} from './Application';
import type { ApplicationLocalState } from './ApplicationLocalState';
import {
    ApplicationLocalStateFromJSON,
    ApplicationLocalStateFromJSONTyped,
    ApplicationLocalStateToJSON,
    ApplicationLocalStateToJSONTyped,
} from './ApplicationLocalState';

/**
 * Account information at a given round.
 * 
 * Definition:
 * data/basics/userBalance.go : AccountData
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * the account public key
     * @type {string}
     * @memberof Account
     */
    address: string;
    /**
     * \[algo\] total number of MicroAlgos in the account
     * @type {number}
     * @memberof Account
     */
    amount: number;
    /**
     * MicroAlgo balance required by the account.
     * 
     * The requirement grows based on asset and application usage.
     * @type {number}
     * @memberof Account
     */
    minBalance: number;
    /**
     * specifies the amount of MicroAlgos in the account, without the pending rewards.
     * @type {number}
     * @memberof Account
     */
    amountWithoutPendingRewards: number;
    /**
     * \[appl\] applications local data stored in this account.
     * 
     * Note the raw object uses `map[int] -> AppLocalState` for this type.
     * @type {Array<ApplicationLocalState>}
     * @memberof Account
     */
    appsLocalState?: Array<ApplicationLocalState>;
    /**
     * The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.
     * @type {number}
     * @memberof Account
     */
    totalAppsOptedIn: number;
    /**
     * 
     * @type {ApplicationStateSchema}
     * @memberof Account
     */
    appsTotalSchema?: ApplicationStateSchema;
    /**
     * \[teap\] the sum of all extra application program pages for this account.
     * @type {number}
     * @memberof Account
     */
    appsTotalExtraPages?: number;
    /**
     * \[asset\] assets held by this account.
     * 
     * Note the raw object uses `map[int] -> AssetHolding` for this type.
     * @type {Array<AssetHolding>}
     * @memberof Account
     */
    assets?: Array<AssetHolding>;
    /**
     * The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.
     * @type {number}
     * @memberof Account
     */
    totalAssetsOptedIn: number;
    /**
     * \[appp\] parameters of applications created by this account including app global data.
     * 
     * Note: the raw account uses `map[int] -> AppParams` for this type.
     * @type {Array<Application>}
     * @memberof Account
     */
    createdApps?: Array<Application>;
    /**
     * The count of all apps (AppParams objects) created by this account.
     * @type {number}
     * @memberof Account
     */
    totalCreatedApps: number;
    /**
     * \[apar\] parameters of assets created by this account.
     * 
     * Note: the raw account uses `map[int] -> Asset` for this type.
     * @type {Array<Asset>}
     * @memberof Account
     */
    createdAssets?: Array<Asset>;
    /**
     * The count of all assets (AssetParams objects) created by this account.
     * @type {number}
     * @memberof Account
     */
    totalCreatedAssets: number;
    /**
     * \[tbx\] The number of existing boxes created by this account's app.
     * @type {number}
     * @memberof Account
     */
    totalBoxes?: number;
    /**
     * \[tbxb\] The total number of bytes used by this account's app's box keys and values.
     * @type {number}
     * @memberof Account
     */
    totalBoxBytes?: number;
    /**
     * 
     * @type {AccountParticipation}
     * @memberof Account
     */
    participation?: AccountParticipation;
    /**
     * Whether or not the account can receive block incentives if its balance is in range at proposal time.
     * @type {boolean}
     * @memberof Account
     */
    incentiveEligible?: boolean;
    /**
     * amount of MicroAlgos of pending rewards in this account.
     * @type {number}
     * @memberof Account
     */
    pendingRewards: number;
    /**
     * \[ebase\] used as part of the rewards computation. Only applicable to accounts which are participating.
     * @type {number}
     * @memberof Account
     */
    rewardBase?: number;
    /**
     * \[ern\] total rewards of MicroAlgos the account has received, including pending rewards.
     * @type {number}
     * @memberof Account
     */
    rewards: number;
    /**
     * The round for which this information is relevant.
     * @type {number}
     * @memberof Account
     */
    round: number;
    /**
     * \[onl\] delegation status of the account's MicroAlgos
     * * Offline - indicates that the associated account is delegated.
     * *  Online  - indicates that the associated account used as part of the delegation pool.
     * *   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.
     * @type {string}
     * @memberof Account
     */
    status: string;
    /**
     * Indicates what type of signature is used by this account, must be one of:
     * * sig
     * * msig
     * * lsig
     * @type {string}
     * @memberof Account
     */
    sigType?: AccountSigTypeEnum;
    /**
     * \[spend\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.
     * @type {string}
     * @memberof Account
     */
    authAddr?: string;
    /**
     * The round in which this account last proposed the block.
     * @type {number}
     * @memberof Account
     */
    lastProposed?: number;
    /**
     * The round in which this account last went online, or explicitly renewed their online status.
     * @type {number}
     * @memberof Account
     */
    lastHeartbeat?: number;
}


/**
 * @export
 */
export const AccountSigTypeEnum = {
    Sig: 'sig',
    Msig: 'msig',
    Lsig: 'lsig'
} as const;
export type AccountSigTypeEnum = typeof AccountSigTypeEnum[keyof typeof AccountSigTypeEnum];


/**
 * Check if a given object implements the Account interface.
 */
export function instanceOfAccount(value: object): value is Account {
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('minBalance' in value) || value['minBalance'] === undefined) return false;
    if (!('amountWithoutPendingRewards' in value) || value['amountWithoutPendingRewards'] === undefined) return false;
    if (!('totalAppsOptedIn' in value) || value['totalAppsOptedIn'] === undefined) return false;
    if (!('totalAssetsOptedIn' in value) || value['totalAssetsOptedIn'] === undefined) return false;
    if (!('totalCreatedApps' in value) || value['totalCreatedApps'] === undefined) return false;
    if (!('totalCreatedAssets' in value) || value['totalCreatedAssets'] === undefined) return false;
    if (!('pendingRewards' in value) || value['pendingRewards'] === undefined) return false;
    if (!('rewards' in value) || value['rewards'] === undefined) return false;
    if (!('round' in value) || value['round'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function AccountFromJSON(json: any): Account {
    return AccountFromJSONTyped(json, false);
}

export function AccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): Account {
    if (json == null) {
        return json;
    }
    return {
        
        'address': json['address'],
        'amount': json['amount'],
        'minBalance': json['min-balance'],
        'amountWithoutPendingRewards': json['amount-without-pending-rewards'],
        'appsLocalState': json['apps-local-state'] == null ? undefined : ((json['apps-local-state'] as Array<any>).map(ApplicationLocalStateFromJSON)),
        'totalAppsOptedIn': json['total-apps-opted-in'],
        'appsTotalSchema': json['apps-total-schema'] == null ? undefined : ApplicationStateSchemaFromJSON(json['apps-total-schema']),
        'appsTotalExtraPages': json['apps-total-extra-pages'] == null ? undefined : json['apps-total-extra-pages'],
        'assets': json['assets'] == null ? undefined : ((json['assets'] as Array<any>).map(AssetHoldingFromJSON)),
        'totalAssetsOptedIn': json['total-assets-opted-in'],
        'createdApps': json['created-apps'] == null ? undefined : ((json['created-apps'] as Array<any>).map(ApplicationFromJSON)),
        'totalCreatedApps': json['total-created-apps'],
        'createdAssets': json['created-assets'] == null ? undefined : ((json['created-assets'] as Array<any>).map(AssetFromJSON)),
        'totalCreatedAssets': json['total-created-assets'],
        'totalBoxes': json['total-boxes'] == null ? undefined : json['total-boxes'],
        'totalBoxBytes': json['total-box-bytes'] == null ? undefined : json['total-box-bytes'],
        'participation': json['participation'] == null ? undefined : AccountParticipationFromJSON(json['participation']),
        'incentiveEligible': json['incentive-eligible'] == null ? undefined : json['incentive-eligible'],
        'pendingRewards': json['pending-rewards'],
        'rewardBase': json['reward-base'] == null ? undefined : json['reward-base'],
        'rewards': json['rewards'],
        'round': json['round'],
        'status': json['status'],
        'sigType': json['sig-type'] == null ? undefined : json['sig-type'],
        'authAddr': json['auth-addr'] == null ? undefined : json['auth-addr'],
        'lastProposed': json['last-proposed'] == null ? undefined : json['last-proposed'],
        'lastHeartbeat': json['last-heartbeat'] == null ? undefined : json['last-heartbeat'],
    };
}

export function AccountToJSON(json: any): Account {
    return AccountToJSONTyped(json, false);
}

export function AccountToJSONTyped(value?: Account | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'address': value['address'],
        'amount': value['amount'],
        'min-balance': value['minBalance'],
        'amount-without-pending-rewards': value['amountWithoutPendingRewards'],
        'apps-local-state': value['appsLocalState'] == null ? undefined : ((value['appsLocalState'] as Array<any>).map(ApplicationLocalStateToJSON)),
        'total-apps-opted-in': value['totalAppsOptedIn'],
        'apps-total-schema': ApplicationStateSchemaToJSON(value['appsTotalSchema']),
        'apps-total-extra-pages': value['appsTotalExtraPages'],
        'assets': value['assets'] == null ? undefined : ((value['assets'] as Array<any>).map(AssetHoldingToJSON)),
        'total-assets-opted-in': value['totalAssetsOptedIn'],
        'created-apps': value['createdApps'] == null ? undefined : ((value['createdApps'] as Array<any>).map(ApplicationToJSON)),
        'total-created-apps': value['totalCreatedApps'],
        'created-assets': value['createdAssets'] == null ? undefined : ((value['createdAssets'] as Array<any>).map(AssetToJSON)),
        'total-created-assets': value['totalCreatedAssets'],
        'total-boxes': value['totalBoxes'],
        'total-box-bytes': value['totalBoxBytes'],
        'participation': AccountParticipationToJSON(value['participation']),
        'incentive-eligible': value['incentiveEligible'],
        'pending-rewards': value['pendingRewards'],
        'reward-base': value['rewardBase'],
        'rewards': value['rewards'],
        'round': value['round'],
        'status': value['status'],
        'sig-type': value['sigType'],
        'auth-addr': value['authAddr'],
        'last-proposed': value['lastProposed'],
        'last-heartbeat': value['lastHeartbeat'],
    };
}

