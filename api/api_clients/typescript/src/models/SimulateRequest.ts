/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SimulateRequestTransactionGroup } from './SimulateRequestTransactionGroup';
import {
    SimulateRequestTransactionGroupFromJSON,
    SimulateRequestTransactionGroupFromJSONTyped,
    SimulateRequestTransactionGroupToJSON,
    SimulateRequestTransactionGroupToJSONTyped,
} from './SimulateRequestTransactionGroup';
import type { SimulateTraceConfig } from './SimulateTraceConfig';
import {
    SimulateTraceConfigFromJSON,
    SimulateTraceConfigFromJSONTyped,
    SimulateTraceConfigToJSON,
    SimulateTraceConfigToJSONTyped,
} from './SimulateTraceConfig';

/**
 * Request type for simulation endpoint.
 * @export
 * @interface SimulateRequest
 */
export interface SimulateRequest {
    /**
     * The transaction groups to simulate.
     * @type {Array<SimulateRequestTransactionGroup>}
     * @memberof SimulateRequest
     */
    txnGroups: Array<SimulateRequestTransactionGroup>;
    /**
     * If provided, specifies the round preceding the simulation. State changes through this round will be used to run this simulation. Usually only the 4 most recent rounds will be available (controlled by the node config value MaxAcctLookback). If not specified, defaults to the latest available round.
     * @type {number}
     * @memberof SimulateRequest
     */
    round?: number;
    /**
     * Allows transactions without signatures to be simulated as if they had correct signatures.
     * @type {boolean}
     * @memberof SimulateRequest
     */
    allowEmptySignatures?: boolean;
    /**
     * Lifts limits on log opcode usage during simulation.
     * @type {boolean}
     * @memberof SimulateRequest
     */
    allowMoreLogging?: boolean;
    /**
     * Allows access to unnamed resources during simulation.
     * @type {boolean}
     * @memberof SimulateRequest
     */
    allowUnnamedResources?: boolean;
    /**
     * Applies extra opcode budget during simulation for each transaction group.
     * @type {number}
     * @memberof SimulateRequest
     */
    extraOpcodeBudget?: number;
    /**
     * 
     * @type {SimulateTraceConfig}
     * @memberof SimulateRequest
     */
    execTraceConfig?: SimulateTraceConfig;
    /**
     * If true, signers for transactions that are missing signatures will be fixed during evaluation.
     * @type {boolean}
     * @memberof SimulateRequest
     */
    fixSigners?: boolean;
}

/**
 * Check if a given object implements the SimulateRequest interface.
 */
export function instanceOfSimulateRequest(value: object): value is SimulateRequest {
    if (!('txnGroups' in value) || value['txnGroups'] === undefined) return false;
    return true;
}

export function SimulateRequestFromJSON(json: any): SimulateRequest {
    return SimulateRequestFromJSONTyped(json, false);
}

export function SimulateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimulateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'txnGroups': ((json['txn-groups'] as Array<any>).map(SimulateRequestTransactionGroupFromJSON)),
        'round': json['round'] == null ? undefined : json['round'],
        'allowEmptySignatures': json['allow-empty-signatures'] == null ? undefined : json['allow-empty-signatures'],
        'allowMoreLogging': json['allow-more-logging'] == null ? undefined : json['allow-more-logging'],
        'allowUnnamedResources': json['allow-unnamed-resources'] == null ? undefined : json['allow-unnamed-resources'],
        'extraOpcodeBudget': json['extra-opcode-budget'] == null ? undefined : json['extra-opcode-budget'],
        'execTraceConfig': json['exec-trace-config'] == null ? undefined : SimulateTraceConfigFromJSON(json['exec-trace-config']),
        'fixSigners': json['fix-signers'] == null ? undefined : json['fix-signers'],
    };
}

export function SimulateRequestToJSON(json: any): SimulateRequest {
    return SimulateRequestToJSONTyped(json, false);
}

export function SimulateRequestToJSONTyped(value?: SimulateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'txn-groups': ((value['txnGroups'] as Array<any>).map(SimulateRequestTransactionGroupToJSON)),
        'round': value['round'],
        'allow-empty-signatures': value['allowEmptySignatures'],
        'allow-more-logging': value['allowMoreLogging'],
        'allow-unnamed-resources': value['allowUnnamedResources'],
        'extra-opcode-budget': value['extraOpcodeBudget'],
        'exec-trace-config': SimulateTraceConfigToJSON(value['execTraceConfig']),
        'fix-signers': value['fixSigners'],
    };
}

