/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccountStateDelta } from './AccountStateDelta';
import {
    AccountStateDeltaFromJSON,
    AccountStateDeltaFromJSONTyped,
    AccountStateDeltaToJSON,
    AccountStateDeltaToJSONTyped,
} from './AccountStateDelta';
import type { EvalDeltaKeyValue } from './EvalDeltaKeyValue';
import {
    EvalDeltaKeyValueFromJSON,
    EvalDeltaKeyValueFromJSONTyped,
    EvalDeltaKeyValueToJSON,
    EvalDeltaKeyValueToJSONTyped,
} from './EvalDeltaKeyValue';

/**
 * Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.
 * @export
 * @interface PendingTransactionResponse
 */
export interface PendingTransactionResponse {
    /**
     * The asset index if the transaction was found and it created an asset.
     * @type {number}
     * @memberof PendingTransactionResponse
     */
    assetIndex?: number;
    /**
     * The application index if the transaction was found and it created an application.
     * @type {number}
     * @memberof PendingTransactionResponse
     */
    applicationIndex?: number;
    /**
     * Rewards in microalgos applied to the close remainder to account.
     * @type {number}
     * @memberof PendingTransactionResponse
     */
    closeRewards?: number;
    /**
     * Closing amount for the transaction.
     * @type {number}
     * @memberof PendingTransactionResponse
     */
    closingAmount?: number;
    /**
     * The number of the asset's unit that were transferred to the close-to address.
     * @type {number}
     * @memberof PendingTransactionResponse
     */
    assetClosingAmount?: number;
    /**
     * The round where this transaction was confirmed, if present.
     * @type {number}
     * @memberof PendingTransactionResponse
     */
    confirmedRound?: number;
    /**
     * Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.
     * 
     * @type {string}
     * @memberof PendingTransactionResponse
     */
    poolError: string;
    /**
     * Rewards in microalgos applied to the receiver account.
     * @type {number}
     * @memberof PendingTransactionResponse
     */
    receiverRewards?: number;
    /**
     * Rewards in microalgos applied to the sender account.
     * @type {number}
     * @memberof PendingTransactionResponse
     */
    senderRewards?: number;
    /**
     * Local state key/value changes for the application being executed by this transaction.
     * @type {Array<AccountStateDelta>}
     * @memberof PendingTransactionResponse
     */
    localStateDelta?: Array<AccountStateDelta>;
    /**
     * Application state delta.
     * @type {Array<EvalDeltaKeyValue>}
     * @memberof PendingTransactionResponse
     */
    globalStateDelta?: Array<EvalDeltaKeyValue>;
    /**
     * Logs for the application being executed by this transaction.
     * @type {Array<string>}
     * @memberof PendingTransactionResponse
     */
    logs?: Array<string>;
    /**
     * Inner transactions produced by application execution.
     * @type {Array<PendingTransactionResponse>}
     * @memberof PendingTransactionResponse
     */
    innerTxns?: Array<PendingTransactionResponse>;
    /**
     * The raw signed transaction.
     * @type {object}
     * @memberof PendingTransactionResponse
     */
    txn: object;
}

/**
 * Check if a given object implements the PendingTransactionResponse interface.
 */
export function instanceOfPendingTransactionResponse(value: object): value is PendingTransactionResponse {
    if (!('poolError' in value) || value['poolError'] === undefined) return false;
    if (!('txn' in value) || value['txn'] === undefined) return false;
    return true;
}

export function PendingTransactionResponseFromJSON(json: any): PendingTransactionResponse {
    return PendingTransactionResponseFromJSONTyped(json, false);
}

export function PendingTransactionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PendingTransactionResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'assetIndex': json['asset-index'] == null ? undefined : json['asset-index'],
        'applicationIndex': json['application-index'] == null ? undefined : json['application-index'],
        'closeRewards': json['close-rewards'] == null ? undefined : json['close-rewards'],
        'closingAmount': json['closing-amount'] == null ? undefined : json['closing-amount'],
        'assetClosingAmount': json['asset-closing-amount'] == null ? undefined : json['asset-closing-amount'],
        'confirmedRound': json['confirmed-round'] == null ? undefined : json['confirmed-round'],
        'poolError': json['pool-error'],
        'receiverRewards': json['receiver-rewards'] == null ? undefined : json['receiver-rewards'],
        'senderRewards': json['sender-rewards'] == null ? undefined : json['sender-rewards'],
        'localStateDelta': json['local-state-delta'] == null ? undefined : ((json['local-state-delta'] as Array<any>).map(AccountStateDeltaFromJSON)),
        'globalStateDelta': json['global-state-delta'] == null ? undefined : ((json['global-state-delta'] as Array<any>).map(EvalDeltaKeyValueFromJSON)),
        'logs': json['logs'] == null ? undefined : json['logs'],
        'innerTxns': json['inner-txns'] == null ? undefined : ((json['inner-txns'] as Array<any>).map(PendingTransactionResponseFromJSON)),
        'txn': json['txn'],
    };
}

export function PendingTransactionResponseToJSON(json: any): PendingTransactionResponse {
    return PendingTransactionResponseToJSONTyped(json, false);
}

export function PendingTransactionResponseToJSONTyped(value?: PendingTransactionResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'asset-index': value['assetIndex'],
        'application-index': value['applicationIndex'],
        'close-rewards': value['closeRewards'],
        'closing-amount': value['closingAmount'],
        'asset-closing-amount': value['assetClosingAmount'],
        'confirmed-round': value['confirmedRound'],
        'pool-error': value['poolError'],
        'receiver-rewards': value['receiverRewards'],
        'sender-rewards': value['senderRewards'],
        'local-state-delta': value['localStateDelta'] == null ? undefined : ((value['localStateDelta'] as Array<any>).map(AccountStateDeltaToJSON)),
        'global-state-delta': value['globalStateDelta'] == null ? undefined : ((value['globalStateDelta'] as Array<any>).map(EvalDeltaKeyValueToJSON)),
        'logs': value['logs'],
        'inner-txns': value['innerTxns'] == null ? undefined : ((value['innerTxns'] as Array<any>).map(PendingTransactionResponseToJSON)),
        'txn': value['txn'],
    };
}

