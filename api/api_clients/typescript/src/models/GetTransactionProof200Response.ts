/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GetTransactionProof200Response
 */
export interface GetTransactionProof200Response {
    /**
     * Proof of transaction membership.
     * @type {string}
     * @memberof GetTransactionProof200Response
     */
    proof: string;
    /**
     * Hash of SignedTxnInBlock for verifying proof.
     * @type {string}
     * @memberof GetTransactionProof200Response
     */
    stibhash: string;
    /**
     * Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
     * @type {number}
     * @memberof GetTransactionProof200Response
     */
    treedepth: number;
    /**
     * Index of the transaction in the block's payset.
     * @type {number}
     * @memberof GetTransactionProof200Response
     */
    idx: number;
    /**
     * The type of hash function used to create the proof, must be one of: 
     * * sha512_256 
     * * sha256
     * @type {string}
     * @memberof GetTransactionProof200Response
     */
    hashtype: GetTransactionProof200ResponseHashtypeEnum;
}


/**
 * @export
 */
export const GetTransactionProof200ResponseHashtypeEnum = {
    Sha512256: 'sha512_256',
    Sha256: 'sha256'
} as const;
export type GetTransactionProof200ResponseHashtypeEnum = typeof GetTransactionProof200ResponseHashtypeEnum[keyof typeof GetTransactionProof200ResponseHashtypeEnum];


/**
 * Check if a given object implements the GetTransactionProof200Response interface.
 */
export function instanceOfGetTransactionProof200Response(value: object): value is GetTransactionProof200Response {
    if (!('proof' in value) || value['proof'] === undefined) return false;
    if (!('stibhash' in value) || value['stibhash'] === undefined) return false;
    if (!('treedepth' in value) || value['treedepth'] === undefined) return false;
    if (!('idx' in value) || value['idx'] === undefined) return false;
    if (!('hashtype' in value) || value['hashtype'] === undefined) return false;
    return true;
}

export function GetTransactionProof200ResponseFromJSON(json: any): GetTransactionProof200Response {
    return GetTransactionProof200ResponseFromJSONTyped(json, false);
}

export function GetTransactionProof200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetTransactionProof200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'proof': json['proof'],
        'stibhash': json['stibhash'],
        'treedepth': json['treedepth'],
        'idx': json['idx'],
        'hashtype': json['hashtype'],
    };
}

export function GetTransactionProof200ResponseToJSON(json: any): GetTransactionProof200Response {
    return GetTransactionProof200ResponseToJSONTyped(json, false);
}

export function GetTransactionProof200ResponseToJSONTyped(value?: GetTransactionProof200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'proof': value['proof'],
        'stibhash': value['stibhash'],
        'treedepth': value['treedepth'],
        'idx': value['idx'],
        'hashtype': value['hashtype'],
    };
}

