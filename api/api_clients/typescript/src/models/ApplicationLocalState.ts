/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ApplicationStateSchema } from './ApplicationStateSchema';
import {
    ApplicationStateSchemaFromJSON,
    ApplicationStateSchemaFromJSONTyped,
    ApplicationStateSchemaToJSON,
    ApplicationStateSchemaToJSONTyped,
} from './ApplicationStateSchema';
import type { TealKeyValue } from './TealKeyValue';
import {
    TealKeyValueFromJSON,
    TealKeyValueFromJSONTyped,
    TealKeyValueToJSON,
    TealKeyValueToJSONTyped,
} from './TealKeyValue';

/**
 * Stores local state associated with an application.
 * @export
 * @interface ApplicationLocalState
 */
export interface ApplicationLocalState {
    /**
     * The application which this local state is for.
     * @type {number}
     * @memberof ApplicationLocalState
     */
    id: number;
    /**
     * 
     * @type {ApplicationStateSchema}
     * @memberof ApplicationLocalState
     */
    schema: ApplicationStateSchema;
    /**
     * Represents a key-value store for use in an application.
     * @type {Array<TealKeyValue>}
     * @memberof ApplicationLocalState
     */
    keyValue?: Array<TealKeyValue>;
}

/**
 * Check if a given object implements the ApplicationLocalState interface.
 */
export function instanceOfApplicationLocalState(value: object): value is ApplicationLocalState {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('schema' in value) || value['schema'] === undefined) return false;
    return true;
}

export function ApplicationLocalStateFromJSON(json: any): ApplicationLocalState {
    return ApplicationLocalStateFromJSONTyped(json, false);
}

export function ApplicationLocalStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationLocalState {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'schema': ApplicationStateSchemaFromJSON(json['schema']),
        'keyValue': json['key-value'] == null ? undefined : ((json['key-value'] as Array<any>).map(TealKeyValueFromJSON)),
    };
}

export function ApplicationLocalStateToJSON(json: any): ApplicationLocalState {
    return ApplicationLocalStateToJSONTyped(json, false);
}

export function ApplicationLocalStateToJSONTyped(value?: ApplicationLocalState | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'schema': ApplicationStateSchemaToJSON(value['schema']),
        'key-value': value['keyValue'] == null ? undefined : ((value['keyValue'] as Array<any>).map(TealKeyValueToJSON)),
    };
}

