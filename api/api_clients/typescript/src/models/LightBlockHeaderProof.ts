/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Proof of membership and position of a light block header.
 * @export
 * @interface LightBlockHeaderProof
 */
export interface LightBlockHeaderProof {
    /**
     * The index of the light block header in the vector commitment tree
     * @type {number}
     * @memberof LightBlockHeaderProof
     */
    index: number;
    /**
     * Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
     * @type {number}
     * @memberof LightBlockHeaderProof
     */
    treedepth: number;
    /**
     * The encoded proof.
     * @type {string}
     * @memberof LightBlockHeaderProof
     */
    proof: string;
}

/**
 * Check if a given object implements the LightBlockHeaderProof interface.
 */
export function instanceOfLightBlockHeaderProof(value: object): value is LightBlockHeaderProof {
    if (!('index' in value) || value['index'] === undefined) return false;
    if (!('treedepth' in value) || value['treedepth'] === undefined) return false;
    if (!('proof' in value) || value['proof'] === undefined) return false;
    return true;
}

export function LightBlockHeaderProofFromJSON(json: any): LightBlockHeaderProof {
    return LightBlockHeaderProofFromJSONTyped(json, false);
}

export function LightBlockHeaderProofFromJSONTyped(json: any, ignoreDiscriminator: boolean): LightBlockHeaderProof {
    if (json == null) {
        return json;
    }
    return {
        
        'index': json['index'],
        'treedepth': json['treedepth'],
        'proof': json['proof'],
    };
}

export function LightBlockHeaderProofToJSON(json: any): LightBlockHeaderProof {
    return LightBlockHeaderProofToJSONTyped(json, false);
}

export function LightBlockHeaderProofToJSONTyped(value?: LightBlockHeaderProof | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'index': value['index'],
        'treedepth': value['treedepth'],
        'proof': value['proof'],
    };
}

