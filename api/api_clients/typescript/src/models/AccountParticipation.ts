/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * AccountParticipation describes the parameters used by this account in consensus protocol.
 * @export
 * @interface AccountParticipation
 */
export interface AccountParticipation {
    /**
     * \[sel\] Selection public key (if any) currently registered for this round.
     * @type {string}
     * @memberof AccountParticipation
     */
    selectionParticipationKey: string;
    /**
     * \[voteFst\] First round for which this participation is valid.
     * @type {number}
     * @memberof AccountParticipation
     */
    voteFirstValid: number;
    /**
     * \[voteKD\] Number of subkeys in each batch of participation keys.
     * @type {number}
     * @memberof AccountParticipation
     */
    voteKeyDilution: number;
    /**
     * \[voteLst\] Last round for which this participation is valid.
     * @type {number}
     * @memberof AccountParticipation
     */
    voteLastValid: number;
    /**
     * \[vote\] root participation public key (if any) currently registered for this round.
     * @type {string}
     * @memberof AccountParticipation
     */
    voteParticipationKey: string;
    /**
     * \[stprf\] Root of the state proof key (if any)
     * @type {string}
     * @memberof AccountParticipation
     */
    stateProofKey?: string;
}

/**
 * Check if a given object implements the AccountParticipation interface.
 */
export function instanceOfAccountParticipation(value: object): value is AccountParticipation {
    if (!('selectionParticipationKey' in value) || value['selectionParticipationKey'] === undefined) return false;
    if (!('voteFirstValid' in value) || value['voteFirstValid'] === undefined) return false;
    if (!('voteKeyDilution' in value) || value['voteKeyDilution'] === undefined) return false;
    if (!('voteLastValid' in value) || value['voteLastValid'] === undefined) return false;
    if (!('voteParticipationKey' in value) || value['voteParticipationKey'] === undefined) return false;
    return true;
}

export function AccountParticipationFromJSON(json: any): AccountParticipation {
    return AccountParticipationFromJSONTyped(json, false);
}

export function AccountParticipationFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountParticipation {
    if (json == null) {
        return json;
    }
    return {
        
        'selectionParticipationKey': json['selection-participation-key'],
        'voteFirstValid': json['vote-first-valid'],
        'voteKeyDilution': json['vote-key-dilution'],
        'voteLastValid': json['vote-last-valid'],
        'voteParticipationKey': json['vote-participation-key'],
        'stateProofKey': json['state-proof-key'] == null ? undefined : json['state-proof-key'],
    };
}

export function AccountParticipationToJSON(json: any): AccountParticipation {
    return AccountParticipationToJSONTyped(json, false);
}

export function AccountParticipationToJSONTyped(value?: AccountParticipation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'selection-participation-key': value['selectionParticipationKey'],
        'vote-first-valid': value['voteFirstValid'],
        'vote-key-dilution': value['voteKeyDilution'],
        'vote-last-valid': value['voteLastValid'],
        'vote-participation-key': value['voteParticipationKey'],
        'state-proof-key': value['stateProofKey'],
    };
}

