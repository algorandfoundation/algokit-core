/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ApplicationStateOperation } from './ApplicationStateOperation';
import {
    ApplicationStateOperationFromJSON,
    ApplicationStateOperationFromJSONTyped,
    ApplicationStateOperationToJSON,
    ApplicationStateOperationToJSONTyped,
} from './ApplicationStateOperation';
import type { AvmValue } from './AvmValue';
import {
    AvmValueFromJSON,
    AvmValueFromJSONTyped,
    AvmValueToJSON,
    AvmValueToJSONTyped,
} from './AvmValue';
import type { ScratchChange } from './ScratchChange';
import {
    ScratchChangeFromJSON,
    ScratchChangeFromJSONTyped,
    ScratchChangeToJSON,
    ScratchChangeToJSONTyped,
} from './ScratchChange';

/**
 * The set of trace information and effect from evaluating a single opcode.
 * @export
 * @interface SimulationOpcodeTraceUnit
 */
export interface SimulationOpcodeTraceUnit {
    /**
     * The program counter of the current opcode being evaluated.
     * @type {number}
     * @memberof SimulationOpcodeTraceUnit
     */
    pc: number;
    /**
     * The writes into scratch slots.
     * @type {Array<ScratchChange>}
     * @memberof SimulationOpcodeTraceUnit
     */
    scratchChanges?: Array<ScratchChange>;
    /**
     * The operations against the current application's states.
     * @type {Array<ApplicationStateOperation>}
     * @memberof SimulationOpcodeTraceUnit
     */
    stateChanges?: Array<ApplicationStateOperation>;
    /**
     * The indexes of the traces for inner transactions spawned by this opcode, if any.
     * @type {Array<number>}
     * @memberof SimulationOpcodeTraceUnit
     */
    spawnedInners?: Array<number>;
    /**
     * The number of deleted stack values by this opcode.
     * @type {number}
     * @memberof SimulationOpcodeTraceUnit
     */
    stackPopCount?: number;
    /**
     * The values added by this opcode to the stack.
     * @type {Array<AvmValue>}
     * @memberof SimulationOpcodeTraceUnit
     */
    stackAdditions?: Array<AvmValue>;
}

/**
 * Check if a given object implements the SimulationOpcodeTraceUnit interface.
 */
export function instanceOfSimulationOpcodeTraceUnit(value: object): value is SimulationOpcodeTraceUnit {
    if (!('pc' in value) || value['pc'] === undefined) return false;
    return true;
}

export function SimulationOpcodeTraceUnitFromJSON(json: any): SimulationOpcodeTraceUnit {
    return SimulationOpcodeTraceUnitFromJSONTyped(json, false);
}

export function SimulationOpcodeTraceUnitFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimulationOpcodeTraceUnit {
    if (json == null) {
        return json;
    }
    return {
        
        'pc': json['pc'],
        'scratchChanges': json['scratch-changes'] == null ? undefined : ((json['scratch-changes'] as Array<any>).map(ScratchChangeFromJSON)),
        'stateChanges': json['state-changes'] == null ? undefined : ((json['state-changes'] as Array<any>).map(ApplicationStateOperationFromJSON)),
        'spawnedInners': json['spawned-inners'] == null ? undefined : json['spawned-inners'],
        'stackPopCount': json['stack-pop-count'] == null ? undefined : json['stack-pop-count'],
        'stackAdditions': json['stack-additions'] == null ? undefined : ((json['stack-additions'] as Array<any>).map(AvmValueFromJSON)),
    };
}

export function SimulationOpcodeTraceUnitToJSON(json: any): SimulationOpcodeTraceUnit {
    return SimulationOpcodeTraceUnitToJSONTyped(json, false);
}

export function SimulationOpcodeTraceUnitToJSONTyped(value?: SimulationOpcodeTraceUnit | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'pc': value['pc'],
        'scratch-changes': value['scratchChanges'] == null ? undefined : ((value['scratchChanges'] as Array<any>).map(ScratchChangeToJSON)),
        'state-changes': value['stateChanges'] == null ? undefined : ((value['stateChanges'] as Array<any>).map(ApplicationStateOperationToJSON)),
        'spawned-inners': value['spawnedInners'],
        'stack-pop-count': value['stackPopCount'],
        'stack-additions': value['stackAdditions'] == null ? undefined : ((value['stackAdditions'] as Array<any>).map(AvmValueToJSON)),
    };
}

