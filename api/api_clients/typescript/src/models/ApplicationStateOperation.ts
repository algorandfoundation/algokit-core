/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AvmValue } from './AvmValue';
import {
    AvmValueFromJSON,
    AvmValueFromJSONTyped,
    AvmValueToJSON,
    AvmValueToJSONTyped,
} from './AvmValue';

/**
 * An operation against an application's global/local/box state.
 * @export
 * @interface ApplicationStateOperation
 */
export interface ApplicationStateOperation {
    /**
     * Operation type. Value `w` is **write**, `d` is **delete**.
     * @type {string}
     * @memberof ApplicationStateOperation
     */
    operation: string;
    /**
     * Type of application state. Value `g` is **global state**, `l` is **local state**, `b` is **boxes**.
     * @type {string}
     * @memberof ApplicationStateOperation
     */
    appStateType: string;
    /**
     * The key (name) of the global/local/box state.
     * @type {string}
     * @memberof ApplicationStateOperation
     */
    key: string;
    /**
     * 
     * @type {AvmValue}
     * @memberof ApplicationStateOperation
     */
    newValue?: AvmValue;
    /**
     * For local state changes, the address of the account associated with the local state.
     * @type {string}
     * @memberof ApplicationStateOperation
     */
    account?: string;
}

/**
 * Check if a given object implements the ApplicationStateOperation interface.
 */
export function instanceOfApplicationStateOperation(value: object): value is ApplicationStateOperation {
    if (!('operation' in value) || value['operation'] === undefined) return false;
    if (!('appStateType' in value) || value['appStateType'] === undefined) return false;
    if (!('key' in value) || value['key'] === undefined) return false;
    return true;
}

export function ApplicationStateOperationFromJSON(json: any): ApplicationStateOperation {
    return ApplicationStateOperationFromJSONTyped(json, false);
}

export function ApplicationStateOperationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationStateOperation {
    if (json == null) {
        return json;
    }
    return {
        
        'operation': json['operation'],
        'appStateType': json['app-state-type'],
        'key': json['key'],
        'newValue': json['new-value'] == null ? undefined : AvmValueFromJSON(json['new-value']),
        'account': json['account'] == null ? undefined : json['account'],
    };
}

export function ApplicationStateOperationToJSON(json: any): ApplicationStateOperation {
    return ApplicationStateOperationToJSONTyped(json, false);
}

export function ApplicationStateOperationToJSONTyped(value?: ApplicationStateOperation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'operation': value['operation'],
        'app-state-type': value['appStateType'],
        'key': value['key'],
        'new-value': AvmValueToJSON(value['newValue']),
        'account': value['account'],
    };
}

