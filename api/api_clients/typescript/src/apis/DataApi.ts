/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GetSyncRound200Response,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetSyncRound200ResponseFromJSON,
    GetSyncRound200ResponseToJSON,
} from '../models/index';

export interface SetSyncRoundRequest {
    round: number;
}

/**
 * 
 */
export class DataApi extends runtime.BaseAPI {

    /**
     * Gets the minimum sync round for the ledger.
     * Returns the minimum sync round the ledger is keeping in cache.
     */
    async getSyncRoundRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSyncRound200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Algo-API-Token"] = await this.configuration.apiKey("X-Algo-API-Token"); // api_key authentication
        }

        const response = await this.request({
            path: `/v2/ledger/sync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSyncRound200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets the minimum sync round for the ledger.
     * Returns the minimum sync round the ledger is keeping in cache.
     */
    async getSyncRound(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSyncRound200Response> {
        const response = await this.getSyncRoundRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sets the minimum sync round on the ledger.
     * Given a round, tells the ledger to keep that round in its cache.
     */
    async setSyncRoundRaw(requestParameters: SetSyncRoundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['round'] == null) {
            throw new runtime.RequiredError(
                'round',
                'Required parameter "round" was null or undefined when calling setSyncRound().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Algo-API-Token"] = await this.configuration.apiKey("X-Algo-API-Token"); // api_key authentication
        }

        const response = await this.request({
            path: `/v2/ledger/sync/{round}`.replace(`{${"round"}}`, encodeURIComponent(String(requestParameters['round']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the minimum sync round on the ledger.
     * Given a round, tells the ledger to keep that round in its cache.
     */
    async setSyncRound(requestParameters: SetSyncRoundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setSyncRoundRaw(requestParameters, initOverrides);
    }

    /**
     * Unset the ledger sync round.
     * Removes minimum sync round restriction from the ledger.
     */
    async unsetSyncRoundRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Algo-API-Token"] = await this.configuration.apiKey("X-Algo-API-Token"); // api_key authentication
        }

        const response = await this.request({
            path: `/v2/ledger/sync`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unset the ledger sync round.
     * Removes minimum sync round restriction from the ledger.
     */
    async unsetSyncRound(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unsetSyncRoundRaw(initOverrides);
    }

}
