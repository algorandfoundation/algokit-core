/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  RawTransaction200Response,
  TransactionParams200Response,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    RawTransaction200ResponseFromJSON,
    RawTransaction200ResponseToJSON,
    TransactionParams200ResponseFromJSON,
    TransactionParams200ResponseToJSON,
} from '../models/index';

export interface RawTransactionRequest {
    rawtxn: Blob;
}

/**
 * 
 */
export class PublicApi extends runtime.BaseAPI {

    /**
     * Broadcasts a raw transaction or transaction group to the network.
     */
    async rawTransactionRaw(requestParameters: RawTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RawTransaction200Response>> {
        if (requestParameters['rawtxn'] == null) {
            throw new runtime.RequiredError(
                'rawtxn',
                'Required parameter "rawtxn" was null or undefined when calling rawTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-binary';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Algo-API-Token"] = await this.configuration.apiKey("X-Algo-API-Token"); // api_key authentication
        }

        const response = await this.request({
            path: `/v2/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['rawtxn'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RawTransaction200ResponseFromJSON(jsonValue));
    }

    /**
     * Broadcasts a raw transaction or transaction group to the network.
     */
    async rawTransaction(requestParameters: RawTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RawTransaction200Response> {
        const response = await this.rawTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get parameters for constructing a new transaction
     */
    async transactionParamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionParams200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Algo-API-Token"] = await this.configuration.apiKey("X-Algo-API-Token"); // api_key authentication
        }

        const response = await this.request({
            path: `/v2/transactions/params`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionParams200ResponseFromJSON(jsonValue));
    }

    /**
     * Get parameters for constructing a new transaction
     */
    async transactionParams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionParams200Response> {
        const response = await this.transactionParamsRaw(initOverrides);
        return await response.value();
    }

}
