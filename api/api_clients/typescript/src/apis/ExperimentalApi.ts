/* tslint:disable */
/* eslint-disable */
/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountAssetsInformation200Response,
  ErrorResponse,
} from '../models/index';
import {
    AccountAssetsInformation200ResponseFromJSON,
    AccountAssetsInformation200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface AccountAssetsInformationRequest {
    address: string;
    limit?: number;
    next?: string;
}

export interface RawTransactionAsyncRequest {
    rawtxn: Blob;
}

/**
 * 
 */
export class ExperimentalApi extends runtime.BaseAPI {

    /**
     * Lookup an account\'s asset holdings.
     * Get a list of assets held by an account, inclusive of asset params.
     */
    async accountAssetsInformationRaw(requestParameters: AccountAssetsInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountAssetsInformation200Response>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling accountAssetsInformation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['next'] != null) {
            queryParameters['next'] = requestParameters['next'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Algo-API-Token"] = await this.configuration.apiKey("X-Algo-API-Token"); // api_key authentication
        }

        const response = await this.request({
            path: `/v2/accounts/{address}/assets`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountAssetsInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Lookup an account\'s asset holdings.
     * Get a list of assets held by an account, inclusive of asset params.
     */
    async accountAssetsInformation(requestParameters: AccountAssetsInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountAssetsInformation200Response> {
        const response = await this.accountAssetsInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns OK if experimental API is enabled.
     */
    async experimentalCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Algo-API-Token"] = await this.configuration.apiKey("X-Algo-API-Token"); // api_key authentication
        }

        const response = await this.request({
            path: `/v2/experimental`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns OK if experimental API is enabled.
     */
    async experimentalCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.experimentalCheckRaw(initOverrides);
    }

    /**
     * Fast track for broadcasting a raw transaction or transaction group to the network through the tx handler without performing most of the checks and reporting detailed errors. Should be only used for development and performance testing.
     */
    async rawTransactionAsyncRaw(requestParameters: RawTransactionAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['rawtxn'] == null) {
            throw new runtime.RequiredError(
                'rawtxn',
                'Required parameter "rawtxn" was null or undefined when calling rawTransactionAsync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-binary';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Algo-API-Token"] = await this.configuration.apiKey("X-Algo-API-Token"); // api_key authentication
        }

        const response = await this.request({
            path: `/v2/transactions/async`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['rawtxn'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fast track for broadcasting a raw transaction or transaction group to the network through the tx handler without performing most of the checks and reporting detailed errors. Should be only used for development and performance testing.
     */
    async rawTransactionAsync(requestParameters: RawTransactionAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rawTransactionAsyncRaw(requestParameters, initOverrides);
    }

}
