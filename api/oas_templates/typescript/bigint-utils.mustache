{{>licenseInfo}}
import JSONbigWithoutConfig from 'json-bigint';

const JSONbig = JSONbigWithoutConfig({
  useNativeBigInt: true,
  strict: true,
});

export interface ParseJSONOptions {
  intDecoding: IntDecoding;
}

export enum IntDecoding {
  /**
   * All integers will be decoded as regular JavaScript numbers.
   * This is the default behavior.
   * If an integer is outside the safe range of JavaScript numbers,
   * an error will be thrown.
   */
  SAFE = 'safe',
  
  /**
   * All integers will be decoded as regular JavaScript numbers.
   * No errors will be thrown if an integer is outside the safe range.
   * This can lead to precision loss for large integers.
   */
  UNSAFE = 'unsafe',
  
  /**
   * All integers will be decoded as BigInt values.
   */
  BIGINT = 'bigint',
  
  /**
   * Integers within the safe range will be decoded as regular JavaScript numbers.
   * Integers outside the safe range will be decoded as BigInt values.
   */
  MIXED = 'mixed',
}

/**
 * Parse JSON with additional options for handling large integers.
 * @param str - The JSON string to parse.
 * @param options - Configures how integers in this JSON string will be decoded.
 */
export function parseJSON(str: string, { intDecoding }: ParseJSONOptions): any {
  if (
    intDecoding !== IntDecoding.SAFE &&
    intDecoding !== IntDecoding.UNSAFE &&
    intDecoding !== IntDecoding.BIGINT &&
    intDecoding !== IntDecoding.MIXED
  ) {
    throw new Error(`Invalid intDecoding option: ${intDecoding}`);
  }

  return JSONbig.parse(str, (_, value) => {
    if (
      value != null &&
      typeof value === 'object' &&
      Object.getPrototypeOf(value) == null
    ) {
      // JSONbig.parse objects are created with Object.create(null) and thus have a null prototype
      // let us remedy that
      Object.setPrototypeOf(value, Object.prototype);
    }

    if (typeof value === 'bigint') {
      if (intDecoding === IntDecoding.SAFE && value > Number.MAX_SAFE_INTEGER) {
        throw new Error(
          `Integer exceeds maximum safe integer: ${value.toString()}. Try parsing with a different intDecoding option.`
        );
      }

      if (
        intDecoding === IntDecoding.BIGINT ||
        (intDecoding === IntDecoding.MIXED && value > Number.MAX_SAFE_INTEGER)
      ) {
        return value;
      }

      // JSONbig.parse converts number to BigInts if they are >= 10**15. This is smaller than
      // Number.MAX_SAFE_INTEGER, so we can convert some BigInts back to normal numbers.
      return Number(value);
    }

    if (typeof value === 'number') {
      if (intDecoding === IntDecoding.BIGINT && Number.isInteger(value)) {
        return BigInt(value);
      }
    }

    return value;
  });
}

/**
 * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
 * 
 * This function differs from the built-in JSON.stringify in that it supports serializing BigInts.
 * 
 * @param value - A JavaScript value, usually an object or array, to be converted.
 * @param replacer - A function that transforms the results.
 * @param space - Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
 */
export function stringifyJSON(
  value: any,
  replacer?: (this: any, key: string, value: any) => any,
  space?: string | number
): string {
  return JSONbig.stringify(value, replacer, space);
}

/**
 * Standard JSON.parse wrapper for when BigInt handling is not needed
 */
export function parseJSONStandard(str: string): any {
  return JSON.parse(str);
}

/**
 * Standard JSON.stringify wrapper for consistency
 */
export function stringifyJSONStandard(value: any, replacer?: any, space?: any): string {
  return JSON.stringify(value, replacer, space);
}

/**
 * Helper function to safely handle BigInt conversion
 */
export function ensureBigInt(value: unknown): bigint {
  if (typeof value === 'undefined') {
    throw new Error('Value is undefined');
  }
  
  if (typeof value === 'bigint') {
    return value;
  }
  
  if (typeof value === 'number') {
    if (!Number.isSafeInteger(value)) {
      throw new Error(`Value ${value} is not a safe integer`);
    }
    return BigInt(value);
  }
  
  throw new Error(`Unexpected type ${typeof value}, ${value}`);
}

/**
 * Helper function to safely handle safe integer conversion
 */
export function ensureSafeInteger(value: unknown): number {
  if (typeof value === 'undefined') {
    throw new Error('Value is undefined');
  }
  
  if (typeof value === 'bigint') {
    if (
      value > BigInt(Number.MAX_SAFE_INTEGER) ||
      value < BigInt(Number.MIN_SAFE_INTEGER)
    ) {
      throw new Error(`BigInt value ${value} is not a safe integer`);
    }
    return Number(value);
  }
  
  if (typeof value === 'number') {
    if (Number.isSafeInteger(value)) {
      return value;
    }
    throw new Error(`Value ${value} is not a safe integer`);
  }
  
  throw new Error(`Unexpected type ${typeof value}, ${value}`);
} 
