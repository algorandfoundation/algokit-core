# coding: utf-8

{{>partial_header}}


import base64
from typing import Dict, cast

import pytest
from algokit_msgpack import (
    RawTransaction200Response,
    SimulateRequest,
    SimulateRequestTransactionGroup,
    SimulateTraceConfig,
    TransactionParams200Response,
)
from algokit_transact import (
    Address,
    PaymentTransactionFields,
    Transaction,
    TransactionType,
    attach_signature,
    encode_transaction,
)
from algokit_utils import SigningAccount
from algosdk.encoding import msgpack_decode
from algosdk.transaction import SignedTransaction

from algokit_algod_api.api.algod_api import AlgodApi


@pytest.fixture
def headers() -> Dict[str, str]:
    """Fixture for common API headers."""
    return {'Accept': 'application/json'}


@pytest.fixture
def algod_instance(api_client_fixture) -> AlgodApi:
    """Fixture for AlgodApi instance."""
    return AlgodApi(api_client_fixture)


@pytest.fixture
def transaction_params(algod_instance: AlgodApi, headers: Dict[str, str]) -> TransactionParams200Response:
    """Fixture for getting transaction parameters."""
    return algod_instance.transaction_params(_headers=headers)


def create_test_transaction(
    sender: SigningAccount,
    receiver: SigningAccount,
    params: TransactionParams200Response,
) -> bytes:
    """
    Create and sign a test payment transaction.

    Args:
        sender: Account sending the transaction
        receiver: Account receiving the transaction
        params: Transaction parameters

    Returns:
        bytes: Signed transaction
    """
    txn = Transaction(

        transaction_type=TransactionType.PAYMENT,
        fee=params.min_fee,
        first_valid=params.last_round,
        last_valid=params.last_round + 1000,
        sender=Address(address=sender.address, pub_key=sender.public_key),
        genesis_hash=base64.b64decode(params.genesis_hash),
        genesis_id=params.genesis_id,
        payment=PaymentTransactionFields(
            amount=int(1e6),
            receiver=Address(address=receiver.address, pub_key=receiver.public_key)
        ),
    )

    encoded_txn = encode_transaction(txn)
    algosdk_txn = msgpack_decode(base64.b64encode(encoded_txn[2:]))

    # Safely extract signature from the signed transaction
    signed_algosdk_txn = sender.signer.sign_transactions([algosdk_txn], [0])[0]
    sig = cast(SignedTransaction, signed_algosdk_txn).signature

    return attach_signature(encoded_txn, base64.b64decode(sig))

class TestTransactionAPI:
    """Specialized tests for transaction endpoints"""

    def test_transaction_params(
        self,
        algod_instance: AlgodApi,
        headers: Dict[str, str]
    ) -> None:
        """Test case for TransactionParams"""
        try:
            response = algod_instance.transaction_params(_headers=headers)

            assert response is not None
            response_dict = response
            assert isinstance(response_dict, TransactionParams200Response)

            # Required transaction parameters
            required_fields = [
                'consensus_version', 'fee', 'genesis_hash',
                'genesis_id', 'last_round', 'min_fee'
            ]
            for field in required_fields:
                assert hasattr(response_dict, field)

        except Exception as e:
            pytest.fail(f"Exception when calling AlgodApi->transaction_params: {e}")

    def test_raw_transaction(
        self,
        bob: SigningAccount,
        alice: SigningAccount,
        algod_instance: AlgodApi,
        headers: Dict[str, str],
        transaction_params: TransactionParams200Response,
    ) -> None:
        """
        Test case for RawTransaction

        Broadcasts a raw transaction or transaction group to the network.
        """
        try:
            signed_txn = create_test_transaction(alice, bob, transaction_params)

            # Call API and validate response
            response = algod_instance.raw_transaction(
                rawtxn=signed_txn,
                _headers=headers
            )

            assert response is not None
            assert isinstance(response, RawTransaction200Response)
            assert response.txId is not None # TODO: Restore txId
            assert len(response.txId) > 0

        except Exception as e:
            pytest.fail(f"Exception when calling AlgodApi->raw_transaction: {e}")

    def test_pending_transactions(
        self,
        bob: SigningAccount,
        algod_instance: AlgodApi,
        headers: Dict[str, str],
        transaction_params: TransactionParams200Response,
    ) -> None:
        """Test case for PendingTransactions"""
        try:
            signed_txn = create_test_transaction(bob, bob, transaction_params)

            # Call API and validate response
            sent_txn = algod_instance.raw_transaction(
                rawtxn=signed_txn,
                _headers=headers
            )
            response = algod_instance.pending_transaction_information(
                txid=sent_txn.txId, # TODO: Restore tx_id
                _headers=headers
            )

            assert response is not None
            assert response.txn is not None
            assert response.confirmed_round is not None
            assert response.pool_error is not None

        except Exception as e:
            pytest.fail(f"Exception when calling AlgodApi->pending_transaction_information: {e}")


    @pytest.mark.parametrize("format_str", ["json", "msgpack"])
    def test_simulate_transaction(
        self,
        bob: SigningAccount,
        algod_instance: AlgodApi,
        headers: Dict[str, str],
        transaction_params: TransactionParams200Response,
        format_str: str,
    ) -> None:
        """Test case for PendingTransactions"""
        try:
            signed_txn = create_test_transaction(bob, bob, transaction_params)

            empty_txn_group = SimulateRequestTransactionGroup(txns=[base64.b64encode(signed_txn).decode()])
            # Use unpacked dict with correct field names (with hyphens)
            trace_config = SimulateTraceConfig(
                enable=True,
                stack_change=True,
                state_change=True,
                scratch_change=True
            )

            request = SimulateRequest(
                allow_empty_signatures=True,
                allow_more_logging=True,
                allow_unnamed_resources=True,
                txn_groups=[empty_txn_group],
                exec_trace_config=trace_config
            )


            assert request is not None

            response = algod_instance.simulate_transaction(
                request=request,
                format=format_str,
                _content_type="application/msgpack",
            )

            assert response is not None
        except Exception as e:
            pytest.fail(f"Exception when calling AlgodApi->pending_transaction_information: {e}")
