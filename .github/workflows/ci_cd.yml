name: CI/CD

on:
  push: # A push indicates that a PR is merged and CD should be triggered
    branches:
      - main
  pull_request: # For PRs, we run CI, which is the same as CD without the release step(s)
    branches:
      - main

# Add permissions for GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # A setup job to define the matricies that will be used across all of the jobs in this workflow
  setup:
    runs-on: ubuntu-latest
    outputs:
      # The packages that use Uniffi bindings
      ffi_packages: ${{ steps.set_ffi_packages.outputs.ffi_packages }}
      # The API client packages
      api_packages: ${{ steps.set_api_packages.outputs.api_packages }}
    steps:
      - id: set_ffi_packages
        run: echo 'ffi_packages=["algokit_transact"]' >> $GITHUB_OUTPUT
      - id: set_api_packages
        run: echo 'api_packages=["algod_api"]' >> $GITHUB_OUTPUT

  typescript_wasm_ci_cd:
    needs: setup
    uses: ./.github/workflows/typescript_wasm_ci_cd.yml
    strategy:
      matrix:
        crate: ${{ fromJSON(needs.setup.outputs.ffi_packages) }}
    with:
      crate: ${{ matrix.crate }}
      release: ${{ github.event_name == 'push' }}
    secrets:
      BOT_ID: ${{ secrets.BOT_ID }}
      BOT_SK: ${{ secrets.BOT_SK }}
      NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This is used because the GitHub NPM package registry doesn't support GitHub App tokens

  python_uniffi_ci_cd:
    needs:
      - setup
      - typescript_wasm_ci_cd
    uses: ./.github/workflows/python_uniffi_ci_cd.yml
    strategy:
      matrix:
        crate: ${{ fromJSON(needs.setup.outputs.ffi_packages) }}
    with:
      crate: ${{ matrix.crate }}
      release: ${{ github.event_name == 'push' }}
    secrets:
      BOT_ID: ${{ secrets.BOT_ID }}
      BOT_SK: ${{ secrets.BOT_SK }}

  typescript_api_ci_cd:
    needs:
      - setup
      - python_uniffi_ci_cd
    uses: ./.github/workflows/typescript_api_client_ci_cd.yml
    strategy:
      matrix:
        api: ${{ fromJSON(needs.setup.outputs.api_packages) }}
    with:
      api: ${{ matrix.api }}
      release: ${{ github.event_name == 'push' }}
    secrets:
      BOT_ID: ${{ secrets.BOT_ID }}
      BOT_SK: ${{ secrets.BOT_SK }}
      NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This is used because the GitHub NPM package registry doesn't support GitHub App tokens

  python_api_ci_cd:
    needs:
      - setup
      - typescript_api_ci_cd
    uses: ./.github/workflows/python_api_client_ci_cd.yml
    strategy:
      matrix:
        api: ${{ fromJSON(needs.setup.outputs.api_packages) }}
    with:
      api: ${{ matrix.api }}
      release: ${{ github.event_name == 'push' }}
    secrets:
      BOT_ID: ${{ secrets.BOT_ID }}
      BOT_SK: ${{ secrets.BOT_SK }}

  deploy_docs:
    # if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build documentation
        run: cargo run --bin build-docs --manifest-path docs/Cargo.toml

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./target/doc"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
